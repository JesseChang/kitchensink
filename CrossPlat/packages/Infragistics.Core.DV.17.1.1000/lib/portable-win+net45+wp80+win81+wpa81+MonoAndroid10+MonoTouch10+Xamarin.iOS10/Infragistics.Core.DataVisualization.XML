<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics.Core.DataVisualization</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Core.Controls.SRProvider">
            <summary>
            Provides string resources.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.SRProvider.#ctor">
            <summary>
            SRProvider constructor.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.OPD_DefaultInteraction">
            <summary>
            The default value of the XamOverviewPlusDetailPane's default interaction button tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.OPD_ScaleToFit">
            <summary>
            The default value of the XamOverviewPlusDetailPane's scale to fit button tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.OPD_ZoomTo100">
            <summary>
            The default value of the XamOverviewPlusDetailPane's zoom to 100% button tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.OPD_ScaleToFit_SeriesViewer">
            <summary>
            The deafult value of the XamOverviewPlusDetailPane's scale to fit button tooltip in the SeriesViewer styles.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.PieChart_Others">
            <summary>
            The default value of the Pie Chart's Others slice label.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.FinancialSeries_Open">
            <summary>
            The default value of the FinancialSeries's Open string.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.FinancialSeries_Close">
            <summary>
            The default value of the FinancialSeries's Close string.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.FinancialSeries_Low">
            <summary>
            The default value of the FinancialSeries's Low string.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.FinancialSeries_High">
            <summary>
            The default value of the FinancialSeries's High string.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.FinancialSeries_Volume">
            <summary>
            The default value of the FinancialSeries's Volume string.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.SRProvider.BubbleSeries_Radius">
            <summary>
            The default value of the BubbleSeries's Radius string.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.TypefaceManager">
            <summary>
            Can be used to control which Skia Typeface will get loaded for a font family.
            <remarks>
            Should only be used from UI thread.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.TypefaceManager.Instance">
            <summary>
            Gets the default instance of the TypefaceManager.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.TypefaceManager.RegisterTypeface(System.String,SkiaSharp.SKTypeface)">
            <summary>
            Registers a non-standard typeface as a particular family name. Can also be used to override the resolution of a specific family name.
            </summary>
            <param name="familyName">The font family name to register as.</param>
            <param name="typeface">The skia typeface to register.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.TypefaceManager.RegisterTypeface(System.String,SkiaSharp.SKTypefaceStyle,SkiaSharp.SKTypeface)">
            <summary>
            Registers a non-standard typeface and style as a particular family name. Can also be used to override the resolution of a specific family name.
            </summary>
            <param name="familyName">The font family name to register as.</param>
            <param name="style">The font style for the provided familyName to register for.</param>
            <param name="typeface">The skia typeface to register.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.TypefaceManager.OverrideDefaultTypeface(SkiaSharp.SKTypeface)">
            <summary>
            Overrides the default typeface the skia based components will use with a particular typeface.
            </summary>
            <param name="typeface">The typeface to use</param>
        </member>
        <member name="M:Infragistics.Core.Controls.TypefaceManager.OverrideDefaultTypeface(SkiaSharp.SKTypefaceStyle,SkiaSharp.SKTypeface)">
            <summary>
            Overrides the default typeface the skia based components will use with a particular typeface.
            </summary>
            <param name="style">The style for which to override the default typeface.</param>
            <param name="typeface">The typeface to use</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider">
            <summary>
            Represents a local data source data provider for in memory data.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.#ctor">
            <summary>
            Constructs a DataSourceLocalDataProvider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.ItemsSource">
            <summary>
            Gets or sets the local data for the provider.
            </summary>
        </member>
        <member name="E:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.SchemaChanged">
            <summary>
            Indicates that the schema for the provider has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.GetItemAtIndex(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index from whic to fetch an item.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.GetItemValue(System.Object,System.String)">
            <summary>
            Gets a named value from an item.
            </summary>
            <param name="item">The item from which to get a value.</param>
            <param name="valueName">The property path to fetch.</param>
            <returns>The fetched value.</returns>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.ActualCount">
            <summary>
            The full count of items in teh provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.ActualSchema">
            <summary>
            The resolved schema of the provider.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">The named of the changed property.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.List">
            <summary>
            Gets the list, if any, assigned to the provider.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.PropertyUpdatedOverride(System.String,System.Object,System.Object)">
            <summary>
            Called when a property on the provider is updated.
            </summary>
            <param name="propertyName">The name of the updated property.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="E:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.PropertyChanged">
            <summary>
            Indicates that a property value has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.ExecutionContext">
            <summary>
            Gets or sets the execution context which the provider should use to send notifications.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.MustSyncListWithChanges">
            <summary>
            Gets if the provider needs to keep the List syncrhonized.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.NotifySetItem(System.Int32,System.Object,System.Object)">
            <summary>
            Manually notifies the provider an item was set at an index in the underlying data. Should not be necessary if data is observable type.
            </summary>
            <param name="index">The index where the item was set.</param>
            <param name="oldItem">The old item at the index.</param>
            <param name="newItem">The new item at the index.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.NotifyClearItems">
            <summary>
            Manually notifies the provider that the underlying data has been cleared or reset. Should not be necessary if data is observable type.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.NotifyInsertItem(System.Int32,System.Object)">
            <summary>
            Manually notifies the provider an item was inserted at an index in the underlying data. Should not be necessary if data is observable type.
            </summary>
            <param name="index">The index where the item was inserted.</param>
            <param name="newItem">The new item at the index.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.NotifyRemoveItem(System.Int32,System.Object)">
            <summary>
            Manually notifies the provider an item was removed at an index in the underlying data. Should not be necessary if data is observable type.
            </summary>
            <param name="index">The index where the item was removed.</param>
            <param name="oldItem">The old item at the index.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.UpdateNotifier">
            <summary>
            Gets or sets a notifier that the data provider will send notifications to.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.DeferAutoRefresh">
            <summary>
            Gets or sets whether automatic refreshes of the data provider should be deferred.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.IsSortingSupported">
            <summary>
            Gets whether the provider supports sorting at this level.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.IsFilteringSupported">
            <summary>
            Gets whether the provider supports filtering at this level.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.SortDescriptions">
            <summary>
            Gets the current sort descriptions assigned to the provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.FilterExpressions">
            <summary>
            Gets the current filter descriptions assigned to the provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.NotifyUsingSourceIndexes">
            <summary>
            Gets whether you should send manual notifications to this provider using original source indices.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.PropertiesRequested">
            <summary>
            Gets or sets a specific set of properties that are required, in case the data provider supports filtering out non required properties.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.IsItemIndexLookupSupported">
            <summary>
            Gets wheter lookup by item is supported at this level.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.IsKeyIndexLookupSupported">
            <summary>
            Gets whether lookup by key is supported at this level.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.QueueAutoRefresh">
            <summary>
            Queues an auto refresh to take place.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.RefreshInternalOverride">
            <summary>
            Is overriden to provide refreshing logic.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.FlushAutoRefresh">
            <summary>
            Forces an auto refresh to occurr synchronously.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.Refresh">
            <summary>
            Synchronously refresh the data provider.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.IndexOfItem(System.Object)">
            <summary>
            Gets the index of a specified item.
            </summary>
            <param name="item">The item for which to get an index.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceLocalDataProvider.IndexOfKey(System.Object[])">
            <summary>
            Gets the index of a specified key.
            </summary>
            <param name="key">The key for which to fetch an index.</param>
            <returns>The requested index.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataIntentAttribute">
            <summary>
            Represents an attribute the can specify a data intent.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataIntentAttribute.Intent">
            <summary>
            Gets the data intent for the attribute.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataIntentAttribute">
            <summary>
            An attribute that can specify a data intent for a field or property.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataIntentAttribute.#ctor(System.String)">
            <summary>
            Constructs a DataIntentAttribute.
            </summary>
            <param name="intent">The data intent to use.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataIntentAttribute.Intent">
            <summary>
            Gets the data intent for the attribute.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.BaseDataSource">
            <summary>
            Provides a base implementation of IDataSource that data source implementations can further extend.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.ActualCount">
            <summary>
            Gets the current actual full count of the items in the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.ActualPrimaryKey">
            <summary>
            Gets the current actual primary key of the data source. This may have been auto detected, if possible, or provided or overriden by the user.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.ActualSchema">
            <summary>
            Gets the resolved schema for the data source. Represents which properties are available for the items. 
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.DeferAutoRefresh">
            <summary>
            Gets or sets whether the auto refresh mechanism of the data source is currently defered. The data source will not react to most setting changes while this is set to true an will instead defer processing.
            Setting this value to false will queue a new refresh.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.ExecutionContext">
            <summary>
            Gets or sets the execution context that the data source should synchronize asynchronous actions with, or use to defer delayed actions.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.FilterExpressions">
            <summary>
            Gets a collection to add filter expressions to. Changing the filter expressions in this collection will adjust the filter applied to the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.FirstVisibleIndexRequested">
            <summary>
            Gets or sets which index consumers of the data source desire to be the current first visible index. A grid, for example, would indicate the current visible top row, and update this as that changes.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.IsFilteringSupported">
            <summary>
            Gets if filtering is supported on the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.IsItemIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided item is supported.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.IsKeyIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided primary key value is supported.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.IsSortingSupported">
            <summary>
            Gets if sorting is supported on the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.IsVirtual">
            <summary>
            Gets if the current data source is a virtual data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.LastVisibleIndexRequested">
            <summary>
            Gets or sets which index consumers of the data source desire to be the current last visible index. A grid, for example, would indicate the current visible top row, and update this as that changes.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.NotifyUsingSourceIndexes">
            <summary>
            Gets whether, when manually notifying the data source of changes, one should use indexes relative to the actual source data, or relative to the view the data source is maintaining into the data.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.PrimaryKey">
            <summary>
            Gets or sets a list of property references that indicate the user provided primary key of the items in the data source. Consumers of the data source will often need to uniquely identify items in the data source. For this purpose a primary key should be specified.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.PropertiesRequested">
            <summary>
            Gets or sets a list of property references for the properties desired by the consumer of the data source. If known, 
            the data source may take steps to request only those properties, or to ensure that those properties are included, rather than the default behavior for
            this type of data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.SortDescriptions">
            <summary>
            Gets a collection to add sort descriptions to. Changing the sort descriptions in this collection will adjust the sort applied to the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.BaseDataSource.UpdateNotifier">
            <summary>
            Gets or sets an IDataSourceUpdateNotifier that the data source should invoke methods on to indicate various changes have occurred.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.FlushAutoRefresh">
            <summary>
            Called to make sure a queued refresh of the data source has been applied before continuing. Should only be needed if you are trying to synchronously examine the results of changing settings on the data source.
            Note, for a virtual data source, the data source itself may be waiting for other synchronous requests to actualize data. This call will not wait for those, but will only make sure the appropriate requests are in flight from the settings changes
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.GetItemAtIndex(System.Int32)">
            <summary>
            Returns the item at the specific index in the data source. This index is based on the data source's current view of the data, not the actual underlying indexes of the original source.
            </summary>
            <param name="index">The index of the requested item.</param>
            <returns>The item at the requested index.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.GetItemProperty(System.Object,System.String)">
            <summary>
            Extracts the value of a named property for an item contained in the data source.
            </summary>
            <param name="item">The item from which to extract a property value.</param>
            <param name="propertyName">The name of the property to extract a value from.</param>
            <returns>The value of the specified property.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.GetItemPropertyAtIndex(System.Int32,System.String)">
            <summary>
            Extracts a named property value from the item at a specified index.
            </summary>
            <param name="index">The index of the item from which to extract a property value.</param>
            <param name="valueName">The property value from which to extract a value.</param>
            <returns>The value of the specified property</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.IndexOfItem(System.Object)">
            <summary>
            Called to return the index for an item contained in the data source, or -1, if the item can't be found, or this action isn't currently supported.
            </summary>
            <param name="item">The item for which to find the index.</param>
            <returns>The index if possible, or -1</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.IndexOfKey(System.Object[])">
            <summary>
            Called to return the index for an primary key value contained in the data source, or -1, if the key can't be found, or this action isn't currently supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.IsPlaceholderItem(System.Int32)">
            <summary>
            Returns true if the item at the requested index is a placeholder item and has not been actualized.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.NotifyClearItems">
            <summary>
            Manually notifies the data source that the data it has bound to has been cleared and needs to be re-examined.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.NotifyInsertItem(System.Int32,System.Object)">
            <summary>
            Manually notifies the data source that an item has been inserted in the data it is bound to.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
            <param name="index">The index of the inserted item.</param>
            <param name="newItem">The new item at the designated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.NotifyRemoveItem(System.Int32,System.Object)">
            <summary>
            Manually notifies the data source that an item has been removed in the data it is bound to.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
            <param name="index">The index of the removed item.</param>
            <param name="oldItem">The old item at the designated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.NotifySetItem(System.Int32,System.Object,System.Object)">
            <summary>
            Manually notifies the data source that an item has been changed in the data it is bound to.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
            <param name="index">The index of the changed item.</param>
            <param name="oldItem">The old item at the desginated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
            <param name="newItem">The new item at the designated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.QueueAutoRefresh">
            <summary>
            Called to manually queue a refresh of the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.Refresh">
            <summary>
            Called to synchronously refresh the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Core.Controls.DataSource.BaseDataSource.PropertyChanged"/> event.
            </summary>
            <seealso cref="T:System.ComponentModel.PropertyChangedEventArgs"/>
            <seealso cref="E:Infragistics.Core.Controls.DataSource.BaseDataSource.PropertyChanged"/>
        </member>
        <member name="E:Infragistics.Core.Controls.DataSource.BaseDataSource.PropertyChanged">
            <summary>
            Indicates that a property has changed on the object.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.BaseDataSource.OnSchemaChanged(Infragistics.Core.Controls.DataSource.DataSourceSchemaChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Core.Controls.DataSource.BaseDataSource.SchemaChanged"/> event.
            </summary>
            <seealso cref="T:Infragistics.Core.Controls.DataSource.DataSourceSchemaChangedEventArgs"/>
            <seealso cref="E:Infragistics.Core.Controls.DataSource.BaseDataSource.SchemaChanged"/>
        </member>
        <member name="E:Infragistics.Core.Controls.DataSource.BaseDataSource.SchemaChanged">
            <summary>
            Indicates that the schema for the underlying data has changed. The data source is not considered ready for use until schema is populated.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.LocalDataSource">
            <summary>
            A local data source which has synchronous access to its data items.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LocalDataSource.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Core.Controls.DataSource.LocalDataSource"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.LocalDataSource.ActualDataProvider">
            <summary>
            Gets the resolved data provider which this data source is actually using.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.LocalDataSource.DataProvider">
            <summary>
            Gets or sets the data provider to use for this data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.LocalDataSource.ItemsSource">
            <summary>
            Gets or sets the backing data for the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LocalDataSource.ResolveDataProvider">
            <summary>
            Returns the default data provider for this data source.
            </summary>
            <returns>A new instance of the default data provider for this data source.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LocalDataSource.GetEnumerator">
            <summary>
            Returns an enumerator for nativating through the items in this data source.
            </summary>
            <returns>An enumerator for navigating through the data source items.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.VirtualDataSource">
            <summary>
            A virtual data source which may not have synchronous access to all its data items, and resulting may synchronously return placeholders for items that have yet to be actualized.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.VirtualDataSource.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Core.Controls.DataSource.VirtualDataSource"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.VirtualDataSource.ActualDataProvider">
            <summary>
            Gets the actual data provider being used with this data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.VirtualDataSource.ActualPageSize">
            <summary>
            Gets the actual resolved page size that will be used.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.VirtualDataSource.DataProvider">
            <summary>
            Gets or sets the virtual data provider to use with this data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.VirtualDataSource.MaxCachedPages">
            <summary>
            Gets or sets the maximum number of data pages to cache in the data source before the oldest pages will start being evicted.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.VirtualDataSource.PageSizeRequested">
            <summary>
            Gets or sets the desired page size. This may or may not be respected by the underlying provider, or its connected services.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.VirtualDataSource.GetUnrealizedCount">
            <summary>
            Gets the number of unrealized or virtual items.
            </summary>
            <returns>The number of unrealized items.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.VirtualDataSource.ResolveDataProviderOverride">
            <summary>
            Is overriden to provide the default data provider for this data source.
            </summary>
            <returns>An instance of the default provider for this data source.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.VirtualDataSource.ResolveDataProvider">
            <summary>
            Returns the default data provider for this data source.
            </summary>
            <returns>An instance of the default provider for this data source.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.VirtualDataSource.ResetCache">
            <summary>
            Resets the internal caches for this virtual data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.VirtualDataSource.ResetCacheOverride">
            <summary>
            Can be overriden to implement clearing the caches of this virtual data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.VirtualDataSource.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the items of this data source.
            </summary>
            <returns>An enumerator that can iterate through the items of this data source.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceDataProviderWorkerSettings">
            <summary>
            Provides settings for the async data provider worker.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceDataProviderWorkerSettings.PageSizeRequested">
            <summary>
            Gets or sets the requested page size for the worker.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceDataProviderWorkerSettings.TimeoutMilliseconds">
            <summary>
            Gets or sets the requested timeout for the worker operations.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceDataProviderWorkerSettings.PageLoaded">
            <summary>
            Gets or sets a callback that should be invoked when a page is loaded.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceDataProviderWorkerSettings.ExecutionContext">
            <summary>
            Gets or sets an execution context on which callbacks should be invoked.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderTaskDataHolder">
            <summary>
            Holds data about a running task for the async data provider worker.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageTaskHolder">
            <summary>
            Encapsulates a running task for the async data provider worker.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageTaskHolder.Task">
            <summary>
            Represents the underlying platform task object.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest">
            <summary>
            Represents an active page request for an async data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an AsyncDataSourcePageRequest.
            </summary>
            <param name="index">The index of the requested page</param>
            <param name="retryDelay">The current retry delay to use if the request is not successful.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest.Index">
            <summary>
            Gets or sets the index of the page to request.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest.RetryDelay">
            <summary>
            Gets or sets the current retry delay to use if the request is not successful.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest.TaskHolder">
            <summary>
            Gets or sets the encapsulated task that represents the request for the page.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest.IsDone">
            <summary>
            Gets or sets whether the request should be considered done.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker">
            <summary>
            Acts as a base class for asynchronous data provider workers. Provides a useful framework for scheduling and checking on asynchronous requests for data pages.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.#ctor(Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceDataProviderWorkerSettings)">
            <summary>
            Constructs an AsyncVirtualDataSourceProviderWorker
            </summary>
            <param name="settings">The settings to apply to the worker.</param>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.MaxSimultaneousExecutingTasks">
            <summary>
            The maximum number of simultaneously execution tasks that is permitted.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.MaxRetryDelay">
            <summary>
            The maximum delay to retry a failing task.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.InitialRetryDelay">
            <summary>
            The initial delay to retry a failing task.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.SyncLock">
            <summary>
            A synchronization lock to use serialize access to state.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.Tasks">
            <summary>
            Gets the currently active set of requests for the worker.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.PageLoaded">
            <summary>
            Gets a callback to invoke when a page request has finished loading.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.ExecutionContext">
            <summary>
            Gets the execution context to synchronize with when reporting on loaded pages.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.ActualPageSize">
            <summary>
            Gets or sets the coerced page size that consumers of the data provider should respect.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.ActualCount">
            <summary>
            Gets or sets the actual current full count of the records associated with the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.ActualSchema">
            <summary>
            Gets or sets the current resolved IDataSourceSchema for the provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.PopulatedActualPageSize">
            <summary>
            Gets or sets whether ActualPageSize has been populated with a coerced value and should be retained, regardless as to whether non-full pages are seen.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.IsRunning">
            <summary>
            Gets or sets whether the worker is currently running or not.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.AddPageRequest(System.Int32,Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority)">
            <summary>
            Adds a new page request to the worker.
            </summary>
            <param name="pageIndex">The index of the page to request.</param>
            <param name="priority">The priority to use for the request.</param>
            <returns>Whether the request was added.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.SignalChangesOcurred">
            <summary>
            Called to indicate that something changed that should immediately wake the worker to further process the active requests.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.AwaitChanges">
            <summary>
            Called by the worker to perform a timed wait for changes to occur.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.AddPageRequestWithRetry(System.Int32,Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority,System.Int32)">
            <summary>
            Adds a page request with the specified retry delay.
            </summary>
            <param name="pageIndex">The index of the page to request.</param>
            <param name="priority">The priority of the request.</param>
            <param name="retryDelay">The current retry delay for the request.</param>
            <returns>Whether the request was added.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.RemovePageRequest(System.Int32)">
            <summary>
            Removes a page request with the specifiec index from the worker.
            </summary>
            <param name="pageIndex">The index of the page request to remove from the worker.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.IsShutdown">
            <summary>
            Gets or sets whether the worker has been shut down.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.RemoveAllPageRequests">
            <summary>
            Removes all pending or active page requests from the worker.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.Shutdown">
            <summary>
            Causes the worker to shut down its operation. Worker should not be reused once entered into this state.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.Initialize">
            <summary>
            Called when the worker is initializing itself before starting the work loop. Override to add additional initialization before the work loop starts.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.GetTaskDataHolder">
            <summary>
            Override to provide the implementation specific data holder for the tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.GetTasksData(Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderTaskDataHolder)">
            <summary>
            Override to populate the implementation specific data for the tasks.
            </summary>
            <param name="holder">The data holder in which to populate the implementation specific data.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.RemoveCompletedTaskData(Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderTaskDataHolder,System.Int32)">
            <summary>
            Override to specify how implementation specific data gets removed for a completed task.
            </summary>
            <param name="taskDataHolder">The holder for the implementation specific data.</param>
            <param name="completed">The index of the completed task.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.GetCompletedTaskData(Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderTaskDataHolder,System.Int32)">
            <summary>
            Populates the implementation specific data for the specified completed task.
            </summary>
            <param name="taskDataHolder">The holder in which to store the data.</param>
            <param name="completed">The index of the completed task.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.CheckAndPotentiallyWaitOnTasks(Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest[])">
            <summary>
            Checks the status of the current tasks, and if possible, yields until changes occur to the active tasks or the worker settings.
            </summary>
            <param name="currentTasks">The current active tasks.</param>
            <returns>The index of a completed task to process, or -1 if no task is ready and yielding until a task completed wasn't possible or desired.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.DoWork">
            <summary>
            The main loop for the worker.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.MakeTaskForRequest(Infragistics.Core.Controls.DataSource.AsyncDataSourcePageRequest,System.Int32)">
            <summary>
            Orverride to specify how a task gets constructed for a request.
            </summary>
            <param name="request">The request to construct a task for.</param>
            <param name="retryDelay">The retry delay to use for a task.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.ProcessCompletedTask(Infragistics.Core.Controls.DataSource.AsyncDataSourcePageTaskHolder,System.Int32,System.Int32,Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderTaskDataHolder)">
            <summary>
            Override to specify how a completed task is handled. This should call the PageLoaded callback, synchronizing with the ExecutionContext, if a page has been successfully loaded.
            </summary>
            <param name="task">The completed task.</param>
            <param name="retryDelay">The current retry delay to apply if the task was not successful.</param>
            <param name="index">The index of the completed task.</param>
            <param name="taskDataHolder">The implementation specific task data.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.RetryIndex(System.Int32,System.Int32)">
            <summary>
            Retries a request with the requested delay.
            </summary>
            <param name="pageIndex">The index of the page to request.</param>
            <param name="currentDelay">The retry delay to use.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.AsyncVirtualDataSourceProviderWorker.IsLastPage(System.Int32)">
            <summary>
            Returns true if the provided index represents the last page of the data.
            </summary>
            <param name="pageIndex">The index to check.</param>
            <returns>true if the index represents the last page.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.FilterFactory">
            <summary>
            Assists in building filters to use with the grids and datasources.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FilterFactory.Instance">
            <summary>
            A singleton instance of the factory.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Build(Infragistics.Core.Controls.DataSource.DataSourceFilterBuilderBuildCallback)">
            <summary>
            Calls a callback providing a factory for use within the callback.
            </summary>
            <param name="callback">The callback to invoke.</param>
            <returns>The filter expression returned from the callback.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Property(System.String)">
            <summary>
            Creates a property access expression.
            </summary>
            <param name="propertyName">The property name to access.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Literal(System.Object)">
            <summary>
            Creates a literal value expression.
            </summary>
            <param name="value">The literal value to use.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Group(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a grouping expression.
            </summary>
            <param name="expression">The expression to put in a group.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.And(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an And expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Or(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an Or expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Not(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an Not expression given an expression.
            </summary>
            <param name="expression">The expression to create the Not expression for.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Add(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an Add expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Divide(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Divide expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Equal(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an Equal expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.GreaterThan(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Greater Than expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.GreaterThanOrEqual(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Greater Than Or Equal expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.LessThan(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Less Than expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.LessThanOrEqual(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Less Than Or Equal expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Modulus(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Modulus expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Multiply(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Multiply expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.NotEqual(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Not Equal expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Subtract(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Subtract expression given a left and right expression.
            </summary>
            <param name="left">The left hand side of the expression.</param>
            <param name="right">The right hand side of the expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Ceiling(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Ceiling expression given an expression.
            </summary>
            <param name="expression">The expression to apply Ceiling to.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Concat(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Concat expression.
            </summary>
            <param name="expression">An expression that resolves to a string.</param>
            <param name="toAppend">An expression that resolves to a string to concatenate to the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Concat(Infragistics.Core.Controls.DataSource.FilterExpression,System.String)">
            <summary>
            Creates a Concat expression.
            </summary>
            <param name="expression">An expression that resolves to a string.</param>
            <param name="toAppend">A string to concatenate to the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Contains(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Contains expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="subString">An expression that resolves to a string search for in the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Contains(Infragistics.Core.Controls.DataSource.FilterExpression,System.String)">
            <summary>
            Creates a Contains expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="subString">A string search for in the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Day(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Day expression.
            </summary>
            <param name="expression">An expression which resolves to a date to extract the day from.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.EndsWith(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an EndsWith expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="subString">An expression that resolves to a string search for at the end of the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.EndsWith(Infragistics.Core.Controls.DataSource.FilterExpression,System.String)">
            <summary>
            Creates a EndsWith expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="subString">A string search for at the end of the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Floor(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Floor expression.
            </summary>
            <param name="expression">An expression that resolves to a number to get the Floor of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Hour(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an Hour expression.
            </summary>
            <param name="expression">An expression that resolves to a datetime to get the Hour of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.IndexOf(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an IndexOf expression.
            </summary>
            <param name="target">An expression that resolves to a string.</param>
            <param name="toFind">An expression that resolves to a string search for in the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.IndexOf(Infragistics.Core.Controls.DataSource.FilterExpression,System.String)">
            <summary>
            Creates an IndexOf expression.
            </summary>
            <param name="target">An expression that resolves to a string.</param>
            <param name="toFind">A string search for in the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Length(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Length expression.
            </summary>
            <param name="expression">An expression that resolves to a string to get the length of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Minute(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Minute expression.
            </summary>
            <param name="expression">An expression that resolves to a datetime to get the Minute of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Month(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Month expression.
            </summary>
            <param name="expression">An expression that resolves to a datetime to get the Month of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Replace(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Replace expression.
            </summary>
            <param name="target">An expression that resolves to a string.</param>
            <param name="toFind">An expression that resolves to a string search for in the first expression.</param>
            <param name="replacement">An expression that resolves to a string to replace for toFind in the first expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Replace(Infragistics.Core.Controls.DataSource.FilterExpression,System.String,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Replace expression.
            </summary>
            <param name="target">An expression that resolves to a string.</param>
            <param name="toFind">A string search for in the first expression.</param>
            <param name="replacement">An expression that resolves to a string to substitute for toFind in target.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Replace(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression,System.String)">
            <summary>
            Creates a Replace expression.
            </summary>
            <param name="target">An expression that resolves to a string.</param>
            <param name="toFind">An expression that resolves to a string search for in the first expression.</param>
            <param name="replacement">A string to substitute for toFind in target.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Replace(Infragistics.Core.Controls.DataSource.FilterExpression,System.String,System.String)">
            <summary>
            Creates a Replace expression.
            </summary>
            <param name="target">An expression that resolves to a string.</param>
            <param name="toFind">A string search for in the first expression.</param>
            <param name="replacement">A string to substitute for toFind in target.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Round(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Round expression.
            </summary>
            <param name="expression">An expression that resolves to a number to round.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Second(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Second expression.
            </summary>
            <param name="expression">An expression that resolves to a datetime to get the Second of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.StartsWith(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a StartsWith expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="subString">An expression that resolves to a string search for at the start of wholeString.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.StartsWith(Infragistics.Core.Controls.DataSource.FilterExpression,System.String)">
            <summary>
            Creates an StartsWith expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="subString">A string search for at the start of wholeString.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an StartsWith expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="startIndex">An expression that resolves to an integer for where to start the substring.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,System.Int32)">
            <summary>
            Creates an StartsWith expression.
            </summary>
            <param name="wholeString">An expression that resolves to a string.</param>
            <param name="startIndex">An integer for where to start the substring.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an StartsWith expression.
            </summary>
            <param name="expression">An expression that resolves to a string.</param>
            <param name="startIndex">An expression that resolves to an integer for where to start the substring.</param>
            <param name="length">An expression that resolves to an integer how long the substring should be.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,System.Int32,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an StartsWith expression.
            </summary>
            <param name="expression">An expression that resolves to a string.</param>
            <param name="startIndex">An integer for where to start the substring.</param>
            <param name="length">An expression that resolves to an integer how long the substring should be.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression,System.Int32)">
            <summary>
            Creates an StartsWith expression.
            </summary>
            <param name="expression">An expression that resolves to a string.</param>
            <param name="startIndex">An expression that resolves to an integer for where to start the substring.</param>
            <param name="length">An integer how long the substring should be.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,System.Int32,System.Int32)">
            <summary>
            Creates an StartsWith expression.
            </summary>
            <param name="expression">An expression that resolves to a string.</param>
            <param name="startIndex">An integer for where to start the substring.</param>
            <param name="length">An integer how long the substring should be.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.ToLower(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a ToLower expression.
            </summary>
            <param name="expression">An expression that resolves to a string to get the ToLower of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.ToUpper(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a ToUpper expression.
            </summary>
            <param name="expression">An expression that resolves to a string to get the ToUpper of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Trim(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Trim expression.
            </summary>
            <param name="expression">An expression that resolves to a string to get the Trim of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Year(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Year expression.
            </summary>
            <param name="expression">An expression that resolves to a datetime to get the Year of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Date(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Date expression.
            </summary>
            <param name="expression">An expression that resolves to a datetime to get the Date of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Time(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates a Time expression.
            </summary>
            <param name="expression">An expression that resolves to a datetime to get the Time of.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Now">
            <summary>
            Creates a Now expression which returns the current date/time.
            </summary>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.IsOf(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType)">
            <summary>
            Creates an IsOf expression.
            </summary>
            <param name="expression">An expression that resolves to an object to get the IsOf of.</param>
            <param name="type">The type to check against.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterFactory.Cast(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType)">
            <summary>
            Creates a Cast expression.
            </summary>
            <param name="expression">An expression that resolves to an object to get the Cast of.</param>
            <param name="type">The type to cast to.</param>
            <returns>The expression.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceFilterBuilderBuildCallback">
            <summary>
            A callback for interacting with the filter builder factory.
            </summary>
            <param name="b">An instance of the FilterFactory to use to build filters more tersely.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.FilterExpression">
            <summary>
            Represents a filter expression for use with the grids and data sources.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Operation(System.String,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,System.Object)">
            <summary>
            Creates an operator filter expression.
            </summary>
            <param name="propertyName">The property to operate on.</param>
            <param name="op">The operator to use.</param>
            <param name="value">A literal value for the operator.</param>
            <returns>An expression that represents the result of the operation.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Operation(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an operator filter expression.
            </summary>
            <param name="left">The left hand side of the operation.</param>
            <param name="op">The operator to use.</param>
            <param name="right">The right hand side of the operation.</param>
            <returns>An expression that represents the result of the operation.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Operation(System.String,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Creates an operator filter expression.
            </summary>
            <param name="propertyName">The property to operate on.</param>
            <param name="op">The operator to use.</param>
            <param name="right">The right hand side of the operation.</param>
            <returns>An expression that represents the result of the operation.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Operation(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,System.Object)">
            <summary>
            Creates an operator filter expression.
            </summary>
            <param name="left">The left hand side of the operation.</param>
            <param name="op">The operator to use.</param>
            <param name="value">A literal value for the operator.</param>
            <returns>An expression that represents the result of the operation.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Function(Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType,Infragistics.Core.Controls.DataSource.FilterExpression[])">
            <summary>
            Creates an function filter expression.
            </summary>
            <param name="func">The function type to apply.</param>
            <param name="args">The arguments for the function.</param>
            <returns>An expression that represents the result of the function call.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.UpdateBooleanReturn">
            <summary>
            Keeps track as to whether there is a boolean return type to this expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.ResolveHasBooleanReturn">
            <summary>
            Override to indicate whether the current expression has a boolean return type at present.
            </summary>
            <returns>True if the expression has a boolean return type.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Property(System.String)">
            <summary>
            Builds a property access expression for the provided property.
            </summary>
            <param name="propertyName">The property name to build an expression for.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.NullLiteral">
            <summary>
            Builds a null literal expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Literal(System.Object)">
            <summary>
            Builds a literal value expression for the provided value.
            </summary>
            <param name="literal">The literal value to build an expression for.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.UnquotedLiteral(System.String)">
            <summary>
            Builds a literal value expression for the provided value which should be left unquoted.
            </summary>
            <param name="literal">The literal value to build an expression for.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Match(System.Object,Infragistics.Core.Controls.DataSource.IDataSourceDataProvider,Infragistics.Core.Controls.DataSource.IDataSourceSchema)">
            <summary>
            Determines if an item matches the filter expression given a data provider and schema.
            </summary>
            <param name="item">The item to check.</param>
            <param name="dataProvider">The data provider for the item.</param>
            <param name="schema">The schema for the item.</param>
            <returns>True, if the item matches the filter.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Evaluate(System.Object,Infragistics.Core.Controls.DataSource.IDataSourceDataProvider,Infragistics.Core.Controls.DataSource.IDataSourceSchema)">
            <summary>
            Evaluates the expression for the provided item, given a data provider and schema.
            </summary>
            <param name="item">The item for which to evaluate.</param>
            <param name="dataProvider">The data provider for the item.</param>
            <param name="schema">The schema for the item.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FilterExpression.IsPropertyReference">
            <summary>
            Gets whether the expression is a property reference.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FilterExpression.IsOperation">
            <summary>
            Gets whether the expression is an operation.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FilterExpression.IsFunction">
            <summary>
            Gets whether the expression is a function.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FilterExpression.IsLiteral">
            <summary>
            Gets whether the expression is a literal.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FilterExpression.IsNull">
            <summary>
            Gets whether the expresssion is null.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Group">
            <summary>
            Returns an expression that is a group expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.And(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an And expression of the current expression and right.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Or(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Or expression of the current expression and right.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Not">
            <summary>
            Returns an expression that is a Not expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Add(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Add expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Add(System.Object)">
            <summary>
            Returns an expression that is an Add expression of the current expression and literal value.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Plus(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Add expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Plus(System.Object)">
            <summary>
            Returns an expression that is an Add expression of the current expression and literalValue.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Divide(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is a Divide expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Divide(System.Object)">
            <summary>
            Returns an expression that is a Divide expression of the current expression and literalValue.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.DividedBy(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is a Divide expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.DividedBy(System.Object)">
            <summary>
            Returns an expression that is a Divide expression of the current expression and literalValue.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsEqualTo(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an IsEqualTo expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsEqualTo(System.Object)">
            <summary>
            Returns an expression that is an IsEqualTo expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsGreaterThan(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an IsGreaterThan expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsGreaterThan(System.Object)">
            <summary>
            Returns an expression that is an IsGreaterThan expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsGreaterThanOrEqualTo(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an IsGreaterThanOrEqualTo expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsGreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns an expression that is an IsGreaterThanOrEqualTo expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsLessThan(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an IsLessThan expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsLessThan(System.Object)">
            <summary>
            Returns an expression that is an IsGreaterThanOrEqualTo expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsLessThanOrEqualTo(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an IsLessThanOrEqualTo expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsLessThanOrEqualTo(System.Object)">
            <summary>
            Returns an expression that is an IsGreaterThanOrEqualTo expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Modulo(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Modulus expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Modulo(System.Object)">
            <summary>
            Returns an expression that is an Modulus expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Multiply(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Multiply expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Multiply(System.Object)">
            <summary>
            Returns an expression that is an Multiply expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Times(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Multiply expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Times(System.Object)">
            <summary>
            Returns an expression that is an Multiply expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsNotEqualTo(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an IsNotEqualTo expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsNotEqualTo(System.Object)">
            <summary>
            Returns an expression that is an IsNotEqualTo expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Subtract(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Subtract expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Subtract(System.Object)">
            <summary>
            Returns an expression that is an Subtract expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Minus(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Subtract expression of the current expression and right.
            </summary>
            <param name="right">The right hand side expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Minus(System.Object)">
            <summary>
            Returns an expression that is an Subtract expression of the current expression and right.
            </summary>
            <param name="literalValue">The right hand side literal value.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Ceiling">
            <summary>
            Returns an expression that is an Ceiling expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Concat(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Concat expression of the current expression and toAppend.
            </summary>
            <param name="toAppend">An expression that resolves to a string to append to the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Concat(System.String)">
            <summary>
            Returns an expression that is an Contains expression of the current expression and subString.
            </summary>
            <param name="toAppend">A string to append to current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Contains(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Contains expression of the current expression and subString.
            </summary>
            <param name="subString">An expresison that resolves to string to search for in the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Contains(System.String)">
            <summary>
            Returns an expression that is an Contains expression of the current expression and subString.
            </summary>
            <param name="subString">A string to search for in the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Day">
            <summary>
            Returns an expression that is an Day expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.EndsWith(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an EndsWith expression of the current expression and subString.
            </summary>
            <param name="subString">An expression that resolves to a string to search for at the end of the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.EndsWith(System.String)">
            <summary>
            Returns an expression that is an EndsWith expression of the current expression and subString.
            </summary>
            <param name="subString">A string to search for at the end of the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Floor">
            <summary>
            Returns an expression that is a Floor expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Hour">
            <summary>
            Returns an expression that is an Hour expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IndexOf(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an IndexOf expression of the current expression and toFind.
            </summary>
            <param name="toFind">An expression that resolves to a string to search for the index of in the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IndexOf(System.String)">
            <summary>
            Returns an expression that is an IndexOf expression of the current expression and toFind.
            </summary>
            <param name="toFind">A string to search for the index of in the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Length">
            <summary>
            Returns an expression that is an Length expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Minute">
            <summary>
            Returns an expression that is an Minute expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Month">
            <summary>
            Returns an expression that is an Month expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Replace(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Replace expression of the current expression.
            </summary>
            <param name="toFind">An expression that resolves to a string to search for in the current expression.</param>
            <param name="replacement">An expression that resolves to a string to substitute into the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Replace(System.String,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Replace expression of the current expression.
            </summary>
            <param name="toFind">A string to search for in the current expression.</param>
            <param name="replacement">An expression that resolves to a string to substitute into the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Replace(Infragistics.Core.Controls.DataSource.FilterExpression,System.String)">
            <summary>
            Returns an expression that is an Replace expression of the current expression.
            </summary>
            <param name="toFind">An expression that resolves to a string to search for in the current expression.</param>
            <param name="replacement">A string to substitute into the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Replace(System.String,System.String)">
            <summary>
            Returns an expression that is an Replace expression of the current expression.
            </summary>
            <param name="toFind">A string to search for in the current expression.</param>
            <param name="replacement">A string to substitute into the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Round">
            <summary>
            Returns an expression that is an Round expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Second">
            <summary>
            Returns an expression that is an Second expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.StartsWith(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an StartsWith expression of the current expression.
            </summary>
            <param name="subString">An expression that resolves to a string to search for at the start of the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.StartsWith(System.String)">
            <summary>
            Returns an expression that is an StartsWith expression of the current expression.
            </summary>
            <param name="subString">A string to search for at the start of the current expression.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Substring(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Substring expression of the current expression.
            </summary>
            <param name="startIndex">An expression that resolves to an integer which indicates where the substring starts.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Substring(System.Int32)">
            <summary>
            Returns an expression that is an Substring expression of the current expression.
            </summary>
            <param name="startIndex">An integer which indicates where the substring starts.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Substring expression of the current expression.
            </summary>
            <param name="startIndex">An expression that resolves to an integer which indicates where the substring starts.</param>
            <param name="length">An expression that resolves to an integer which indicates how long the substring should be.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Substring(System.Int32,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Returns an expression that is an Substring expression of the current expression.
            </summary>
            <param name="startIndex">An integer which indicates where the substring starts.</param>
            <param name="length">An expression that resolves to an integer which indicates how long the substring should be.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Substring(Infragistics.Core.Controls.DataSource.FilterExpression,System.Int32)">
            <summary>
            Returns an expression that is an Substring expression of the current expression.
            </summary>
            <param name="startIndex">An expression that resolves to an integer which indicates where the substring starts.</param>
            <param name="length">An integer which indicates how long the substring should be.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Substring(System.Int32,System.Int32)">
            <summary>
            Returns an expression that is an Substring expression of the current expression.
            </summary>
            <param name="startIndex">An integer which indicates where the substring starts.</param>
            <param name="length">An integer which indicates how long the substring should be.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.ToLower">
            <summary>
            Returns an expression that is an ToLower expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.ToUpper">
            <summary>
            Returns an expression that is an ToUpper expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Trim">
            <summary>
            Returns an expression that is an Trim expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Year">
            <summary>
            Returns an expression that is an Year expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Date">
            <summary>
            Returns an expression that is an Date expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Time">
            <summary>
            Returns an expression that is an Time expression of the current expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Now">
            <summary>
            Returns an expression that is an Now expression.
            </summary>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsOf(Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType)">
            <summary>
            Returns an expression that is an IsOf expression of the current expression and propertyType.
            </summary>
            <param name="propertyType">A property type to check against.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Cast(Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType)">
            <summary>
            Returns an expression that is an Cast expression of the current expression and propertyType.
            </summary>
            <param name="propertyType">A property type to cast to.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.IsOf(System.String)">
            <summary>
            Returns an expression that is an IsOf expression of the current expression and propertyType.
            </summary>
            <param name="objectType">A property type to check against.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpression.Cast(System.String)">
            <summary>
            Returns an expression that is an Cast expression of the current expression and propertyType.
            </summary>
            <param name="objectType">A property type to check against.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.OperationFilterExpression">
            <summary>
            Represents a filter expression that is an operator being applied to other expressions.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.OperationFilterExpression.#ctor">
            <summary>
            Constructs an operator expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.OperationFilterExpression.#ctor(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Constructs an operator expression.
            </summary>
            <param name="left">The left hand side expression.</param>
            <param name="op">The operator to use.</param>
            <param name="right">The right hand side expression.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.OperationFilterExpression.#ctor(System.String,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Constructs an operator expression.
            </summary>
            <param name="propertyName">The property to access.</param>
            <param name="op">The operator to use.</param>
            <param name="right">The right hand side expression.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.OperationFilterExpression.#ctor(Infragistics.Core.Controls.DataSource.FilterExpression,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,System.Object)">
            <summary>
            Constructs an operator expression.
            </summary>
            <param name="left">The left hand side expression.</param>
            <param name="op">The operator to use.</param>
            <param name="value">The literal value for the right hand side.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.OperationFilterExpression.#ctor(System.String,Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType,System.Object)">
            <summary>
            Constructs an operator expression.
            </summary>
            <param name="propertyName">The property to access.</param>
            <param name="op">The operator to use.</param>
            <param name="value">The literal value for the right hand side.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.IsOperation">
            <summary>
            Gets if the expression is an operation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.OperationFilterExpression.ResolveHasBooleanReturn">
            <summary>
            Returns true if the expression has a boolean return type.
            </summary>
            <returns>True, if the expression has a boolean return type.</returns>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.IsComparisonOperation">
            <summary>
            Gets if the operation is a comparison operation.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.PropertyName">
            <summary>
            Gets or sets the property name the operation applies to, if any.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.HasPropertyName">
            <summary>
            Gets if the operation applies directly to a property name.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.Value">
            <summary>
            Gets the literal value associated with the operation, if any.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.HasValue">
            <summary>
            Gets if the opration has a right hand side.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.Left">
            <summary>
            Gets or sets the left hand side expression.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.HasLeft">
            <summary>
            Gets if the operation has a left hand side.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.Right">
            <summary>
            Gets or sets the right hand side expression.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.HasRight">
            <summary>
            Gets if there is a right hand side to the epxression.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.Operator">
            <summary>
            Gets or sets the operator to use for the expression.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.HasOperator">
            <summary>
            Gets if there is an operator set for the expression.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.OperationFilterExpression.IsBooleanOperation">
            <summary>
            Gets if the expression had a boolean return type.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.OperationFilterExpression.Evaluate(System.Object,Infragistics.Core.Controls.DataSource.IDataSourceDataProvider,Infragistics.Core.Controls.DataSource.IDataSourceSchema)">
            <summary>
            Evaluates the expression for the given item.
            </summary>
            <param name="item">The item for which to evaluate.</param>
            <param name="dataProvider">The data provider for the item.</param>
            <param name="schema">The schema for the item.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.FunctionFilterExpression">
            <summary>
            Represents a filter expression that is a function applied to some parameter expressions.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.#ctor">
            <summary>
            Constructs a function expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.#ctor(Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType,Infragistics.Core.Controls.DataSource.FilterExpression[])">
            <summary>
            Constructs a function expression.
            </summary>
            <param name="function">The function type to use.</param>
            <param name="args">The argument expressions to use.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.IsFunction">
            <summary>
            Gets if the expression is a function expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.ResolveHasBooleanReturn">
            <summary>
            Gets if the function has a boolean return type.
            </summary>
            <returns>True, if the function has a boolean return type.</returns>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.FunctionType">
            <summary>
            Gets or sets the function type of the function.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.IsBooleanFunction">
            <summary>
            Gets if the function has a boolean return type.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.FunctionArguments">
            <summary>
            Gets the arguments of the function.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.HasFunctionArguments">
            <summary>
            Gets whether the expression has arguments specified.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FunctionFilterExpression.Evaluate(System.Object,Infragistics.Core.Controls.DataSource.IDataSourceDataProvider,Infragistics.Core.Controls.DataSource.IDataSourceSchema)">
            <summary>
            Evaluates the expression for an item.
            </summary>
            <param name="item">The item for which to evaluate.</param>
            <param name="dataProvider">The data provider for the item.</param>
            <param name="schema">The schema for the item.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression">
            <summary>
            Represents a filter expression that is a property access.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression.#ctor">
            <summary>
            Constructs a property reference expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression.#ctor(System.String)">
            <summary>
            Constructs a property reference expression.
            </summary>
            <param name="propertyReference"></param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression.IsPropertyReference">
            <summary>
            Gets if the expression is a property reference.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression.ResolveHasBooleanReturn">
            <summary>
            Gets if the expression has a boolean return type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression.Evaluate(System.Object,Infragistics.Core.Controls.DataSource.IDataSourceDataProvider,Infragistics.Core.Controls.DataSource.IDataSourceSchema)">
            <summary>
            Evaluates the expression for the given item.
            </summary>
            <param name="item">The item for which to evaluate.</param>
            <param name="dataProvider">The data provider for the item.</param>
            <param name="schema">The schema for the item.</param>
            <returns>The evaulated value.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.LiteralFilterExpression">
            <summary>
            Represents a literal value filter expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.#ctor">
            <summary>
            Constructs a literal value expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.#ctor(System.Object)">
            <summary>
            Constructs a literal value filter expression.
            </summary>
            <param name="literalValue">The value to use.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a literal value filter expression.
            </summary>
            <param name="stringLiteral">The string to use.</param>
            <param name="leaveUnquoted">True if the string use be used as an unquoted literal.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.IsLiteral">
            <summary>
            Gets if the expression is a literal value.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.IsNull">
            <summary>
            Gets if the expression is a null value.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.LiteralValue">
            <summary>
            Gets or sets the literal value to use.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.LeaveUnquoted">
            <summary>
            Gets or sets whether the value should be emitted unquoted.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.ResolveHasBooleanReturn">
            <summary>
            Gets if the expression has a boolean return value.
            </summary>
            <returns>True, if the expression has a literal return value.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.LiteralFilterExpression.Evaluate(System.Object,Infragistics.Core.Controls.DataSource.IDataSourceDataProvider,Infragistics.Core.Controls.DataSource.IDataSourceSchema)">
            <summary>
            Evaluates the expression for the provided item.
            </summary>
            <param name="item">The item for which to evaluate.</param>
            <param name="dataProvider">The data provider for the item.</param>
            <param name="schema">The schema to use for the item.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType">
            <summary>
            Indentifies the function type for a filter function expression.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Contains">
            <summary>
            Determines if a string contains another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.EndsWith">
            <summary>
            Determines if a string ends with another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.StartsWith">
            <summary>
            Determines if a string starts with another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Length">
            <summary>
            Gets the length of a string.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.IndexOf">
            <summary>
            Gets the index of a string within another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Replace">
            <summary>
            Replaces instances of a string within another with a separate string.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Substring">
            <summary>
            Gets the substring of a string based on start index and optionally length.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.ToLower">
            <summary>
            Gets the lowercase representation of a string.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.ToUpper">
            <summary>
            Gets the uppercase representation of a string.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Trim">
            <summary>
            Trims the starting and ending whitespace from a string.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Concat">
            <summary>
            Concatenates strings together.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Day">
            <summary>
            Gets the day from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Hour">
            <summary>
            Gets the hour from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Minute">
            <summary>
            Gets the minute from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Month">
            <summary>
            Gets the month from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Second">
            <summary>
            Gets teh second from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Year">
            <summary>
            Gets the year from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Round">
            <summary>
            Rounds a numeric value.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Floor">
            <summary>
            Floors a numeric value.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Ceiling">
            <summary>
            Ceilings a numeric value.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Date">
            <summary>
            Gets the date from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Time">
            <summary>
            Gets the time from a date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Now">
            <summary>
            Gets the current date/time.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.IsOf">
            <summary>
            Gets whether the value matches a certain type.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionFunctionType.Cast">
            <summary>
            Gets a value cast to a specific type.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType">
            <summary>
            Identifies the operator type of an operator filter expression.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.None">
            <summary>
            No operator type specified.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Equal">
            <summary>
            Determines if two expressions are equal.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.NotEqual">
            <summary>
            Determines if two expressions are not equal.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.GreaterThan">
            <summary>
            Determines if an expression is greater than another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.GreaterThanOrEqual">
            <summary>
            Determines if an expression is greater than or equal to another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.LessThan">
            <summary>
            Determines if an expression is less than another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.LessThanOrEqual">
            <summary>
            Determines if an expression is less than or equal to another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.And">
            <summary>
            Applies the And operator to two expressions.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Or">
            <summary>
            Applies the Or operator to two expressions.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Not">
            <summary>
            Applies the Not operator to a single expression.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Add">
            <summary>
            Adds two expressions.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Subtract">
            <summary>
            Subtracts one expression from another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Multiply">
            <summary>
            Multiplies two expressions.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Divide">
            <summary>
            Divides one expression by another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Modulo">
            <summary>
            Performs the modulus of one expression by another.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.FilterExpressionOperatorType.Grouping">
            <summary>
            Groups an expression.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.FilterExpressionCollection">
            <summary>
            Represents a colleciton of filter expressions.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.FilterExpressionVisitor">
            <summary>
            Visits a filter expression for processing.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpressionVisitor.Visit(Infragistics.Core.Controls.DataSource.FilterExpression)">
            <summary>
            Visits an expression.
            </summary>
            <param name="expression">The expression to visit.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpressionVisitor.VisitOperationExpression(Infragistics.Core.Controls.DataSource.OperationFilterExpression)">
            <summary>
            Visits an operator expression.
            </summary>
            <param name="expression">The expression to visit.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpressionVisitor.VisitFunctionExpression(Infragistics.Core.Controls.DataSource.FunctionFilterExpression)">
            <summary>
            Visits a function expression.
            </summary>
            <param name="expression">The expression to visit.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpressionVisitor.VisitLiteralExpression(Infragistics.Core.Controls.DataSource.LiteralFilterExpression)">
            <summary>
            Visits a literal expression.
            </summary>
            <param name="expression">The expression to visit.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.FilterExpressionVisitor.VisitPropertyReferenceExpression(Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression)">
            <summary>
            Visits a property reference expression.
            </summary>
            <param name="expression">The expression to visit.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSource">
            <summary>
            Represents a data source for use in components which need advanced access to data.
            </summary>
        </member>
        <member name="E:Infragistics.Core.Controls.DataSource.IDataSource.SchemaChanged">
            <summary>
            Indicates when the schema for the data source has changed. The schema source is not considered valid until there is a populated schema.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.IsPlaceholderItem(System.Int32)">
            <summary>
            Returns true if the item at the requested index is a placeholder item and has not been actualized.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.GetItemPropertyAtIndex(System.Int32,System.String)">
            <summary>
            Extracts a named property value from the item at a specified index.
            </summary>
            <param name="index">The index of the item from which to extract a property value.</param>
            <param name="valueName">The property value from which to extract a value.</param>
            <returns>The value of the specified property</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.GetItemProperty(System.Object,System.String)">
            <summary>
            Extracts the value of a named property for an item contained in the data source.
            </summary>
            <param name="item">The item from which to extract a property value.</param>
            <param name="propertyName">The name of the property to extract a value from.</param>
            <returns>The value of the specified property.</returns>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.UpdateNotifier">
            <summary>
            Gets or sets an DataSource update notifier that the data source should invoke methods on to indicate various changes have occurred.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.ExecutionContext">
            <summary>
            Gets the execution context that the data source should synchronize asynchronous actions with, or use to defer delayed actions.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.ActualSchema">
            <summary>
            Gets the resolved schema for the data source. Represents which properties are available for the items. 
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.FirstVisibleIndexRequested">
            <summary>
            Gets or sets which index consumers of the data source desire to be the current first visible index. A grid, for example, would indicate the current visible top row, and update this as that changes.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.LastVisibleIndexRequested">
            <summary>
            Gets or sets which index consumers of the data source desire to be the current last visible index. A grid, for example, would indicate the current visible top row, and update this as that changes.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.IsVirtual">
            <summary>
            Gets if the current data source is a virtual data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.IsSortingSupported">
            <summary>
            Gets if sorting is supported on the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.SortDescriptions">
            <summary>
            Gets a collection to add sort descriptions to. Changing the sort descriptions in this collection will adjust the sort applied to the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.IsFilteringSupported">
            <summary>
            Gets if filtering is supported on the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.NotifyUsingSourceIndexes">
            <summary>
            Gets whether, when manually notifying the data source of changes, one should use indexes relative to the actual source data, or relative to the view the data source is maintaining into the data.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.FilterExpressions">
            <summary>
            Gets a collection to add filter expressions to. Changing the filter expressions in this collection will adjust the filter applied to the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.QueueAutoRefresh">
            <summary>
            Called to manually queue a refresh of the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.DeferAutoRefresh">
            <summary>
            Gets or sets whether the auto refresh mechanism of the data source is currently defered. The data source will not react to most setting changes while this is set to true an will instead defer processing.
            Setting this value to false will queue a new refresh.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.FlushAutoRefresh">
            <summary>
            Called to make sure a queued refresh of the data source has been applied before continuing. Should only be needed if you are trying to synchronously examine the results of changing settings on the data source.
            Note, for a virtual data source, the data source itself may be waiting for other synchronous requests to actualize data. This call will not wait for those, but will only make sure the appropriate requests are in flight from the settings changes
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.Refresh">
            <summary>
            Called to synchronously refresh the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.PrimaryKey">
            <summary>
            Gets or sets a list of property references that indicate the user provided primary key of the items in the data source. Consumers of the data source will often need to uniquely identify items in the data source. For this purpose a primary key should be specified.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.ActualPrimaryKey">
            <summary>
            Gets the current actual primary key of the data source. This may have been auto detected, if possible, or provided or overriden by the user.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.PropertiesRequested">
            <summary>
            Gets or sets a list of property references for the properties desired by the consumer of the data source. If known, 
            the data source may take steps to request only those properties, or to ensure that those properties are included, rather than the default behavior for
            this type of data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.IndexOfItem(System.Object)">
            <summary>
            Called to return the index for an item contained in the data source, or -1, if the item can't be found, or this action isn't currently supported.
            </summary>
            <param name="item">The item for which to find the index.</param>
            <returns>The index if possible, or -1</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSource.IndexOfKey(System.Object[])">
            <summary>
            Called to return the index for an primary key value contained in the data source, or -1, if the key can't be found, or this action isn't currently supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.IsItemIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided item is supported.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSource.IsKeyIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided primary key value is supported.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceSupportsCount">
            <summary>
            A data source that supports indicating the actual count of its items.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceSupportsCount.ActualCount">
            <summary>
            Gets the current actual full count of the items in the data source.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceSupportsIndexedAccess">
            <summary>
            A data source that supports indexed access to its items.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceSupportsIndexedAccess.GetItemAtIndex(System.Int32)">
            <summary>
            Returns the item at the specific index in the data source. This index is based on the data source's current view of the data, not the actual underlying indexes of the original source.
            </summary>
            <param name="index">The index of the requested item.</param>
            <returns>The item at the requested index.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.ISupportsDataChangeNotifications">
            <summary>
            Implementors support being notified of changes to data collections.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ISupportsDataChangeNotifications.NotifySetItem(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item has been set at a particular index.
            </summary>
            <param name="index">The index of the change.</param>
            <param name="oldItem">The old item present at the index.</param>
            <param name="newItem">The new item present at the index.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ISupportsDataChangeNotifications.NotifyClearItems">
            <summary>
            Called when a large number or all items have changed, or the collection has been cleared.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ISupportsDataChangeNotifications.NotifyInsertItem(System.Int32,System.Object)">
            <summary>
            Called when an item has been inserted at a specific index.
            </summary>
            <param name="index">The index that the item has been inserted at.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ISupportsDataChangeNotifications.NotifyRemoveItem(System.Int32,System.Object)">
            <summary>
            Called when an item has been removed from a specific index.
            </summary>
            <param name="index">The index the item was removed from.</param>
            <param name="oldItem">The removed item.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceSchemaChangedHandler">
            <summary>
            Called when a data source schema changes.
            </summary>
            <param name="sender">The data source for which the schema is changing.</param>
            <param name="args">Information about the schema change.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceSchemaChangedEventArgs">
            <summary>
            Provides information about a schema change event that has occurred.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceSchemaChangedEventArgs.#ctor(Infragistics.Core.Controls.DataSource.IDataSourceSchema,System.Int32)">
            <summary>
            Constructs a DataSourceSchemaChangedEventArgs
            </summary>
            <param name="schema">The new schema.</param>
            <param name="currentCount">The new full count.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceSchemaChangedEventArgs.Schema">
            <summary>
            Gets the new schema that has been provided.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceSchemaChangedEventArgs.Count">
            <summary>
            Gets the current full count of items in the data source.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider">
            <summary>
            Represents an interface that can be implemented to create a data provider for a data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.GetItemValue(System.Object,System.String)">
            <summary>
            Gets a property value by name from an item.
            </summary>
            <param name="item">The item to get a property value from.</param>
            <param name="valueName">The property name to retrieve a value for.</param>
            <returns>The property value.</returns>
        </member>
        <member name="E:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.SchemaChanged">
            <summary>
            Indicates when teh schema of the data provider has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.ActualSchema">
            <summary>
            Gets the resolved schema for the data provider. Represents which properties are available for the items. 
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.ExecutionContext">
            <summary>
            Gets or sets the execution context that the data provider should synchronize asynchronous actions with, or use to defer delayed actions.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.UpdateNotifier">
            <summary>
            Gets or sets an DataSource update notifier that the data provider should invoke methods on to indicate various changes have occurred.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.QueueAutoRefresh">
            <summary>
            Called to manually queue a refresh of the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.DeferAutoRefresh">
            <summary>
            Gets or sets whether the auto refresh mechanism of the data provider is currently defered. The data provider will not react to most setting changes while this is set to true an will instead defer processing.
            Setting this value to false will queue a new refresh.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.FlushAutoRefresh">
            <summary>
            Called to make sure a queued refresh of the data provider has been applied before continuing. Should only be needed if you are trying to synchronously examine the results of changing settings on the data provider.
            Note, for a virtual data provider, the data provider itself may be waiting for other synchronous requests to actualize data. This call will not wait for those, but will only make sure the appropriate requests are in flight from the settings changes
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.Refresh">
            <summary>
            Called to synchronously refresh the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.IsSortingSupported">
            <summary>
            Gets if sorting is supported on the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.SortDescriptions">
            <summary>
            Gets a collection to add sort descriptions to. Changing the sort descriptions in this collection will adjust the sort applied to the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.IsFilteringSupported">
            <summary>
            Gets if filtering is supported on the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.FilterExpressions">
            <summary>
            Gets a collection to add filter expressions to. Changing the filter expressions in this collection will adjust the filter applied to the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.PropertiesRequested">
            <summary>
            Gets or sets a list of property references for the properties desired by the consumer of the data provider. If known, 
            the data provider may take steps to request only those properties, or to ensure that those properties are included, rather than the default behavior for
            this type of data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.NotifyUsingSourceIndexes">
            <summary>
            Gets whether, when manually notifying the data source of changes, one should use indexes relative to the actual source data, or relative to the view the data source is maintaining into the data.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.IndexOfItem(System.Object)">
            <summary>
            Called to return the index for an item contained in the data source, or -1, if the item can't be found, or this action isn't currently supported.
            </summary>
            <param name="item">The item for which to find the index.</param>
            <returns>The index if possible, or -1</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.IndexOfKey(System.Object[])">
            <summary>
            Called to return the index for an primary key value contained in the data source, or -1, if the key can't be found, or this action isn't currently supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.IsItemIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided item is supported.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceDataProvider.IsKeyIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided primary key value is supported.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceDataProviderUpdateNotifier">
            <summary>
            Can be implemented to serve as a target for data provider update events.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceDataProviderSchemaChangedHandler">
            <summary>
            Called when the schame for a data provider has changed.
            </summary>
            <param name="sender">The data provider for which the schema has changed.</param>
            <param name="args">Information about the changed schema.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceDataProviderSchemaChangedEventArgs">
            <summary>
            Provides information about a schema change event.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DataSourceDataProviderSchemaChangedEventArgs.#ctor(Infragistics.Core.Controls.DataSource.IDataSourceSchema,System.Int32)">
            <summary>
            Constructs a DataSourceDataProviderSchemaChangedEventArgs.
            </summary>
            <param name="schema">The new schema.</param>
            <param name="currentCount">The new full count.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceDataProviderSchemaChangedEventArgs.Schema">
            <summary>
            Represents the current schema for the data provider.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DataSourceDataProviderSchemaChangedEventArgs.Count">
            <summary>
            Represents the current full count for the data provider. May be -1 if this information is not available yet.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceExecutionContext">
            <summary>
            Represents an execution context that DataSources and DataProviders can syncrhonize execution with, or use to delay execution of some logic.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceExecutionContext.Execute(Infragistics.Core.Controls.DataSource.DataSourceExecutionContextExecuteCallback)">
            <summary>
            Executes the provided callback on the execution context.
            </summary>
            <param name="callback">The callback to invoke.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceExecutionContext.EnqueueAction(Infragistics.Core.Controls.DataSource.DataSourceExecutionContextExecuteCallback)">
            <summary>
            Enqueues an action to be called at the earliest opportunity on the execution context.
            </summary>
            <param name="callback">The callback to invoke.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceExecutionContext.ExecuteDelayed(Infragistics.Core.Controls.DataSource.DataSourceExecutionContextExecuteCallback,System.Int32)">
            <summary>
            Enqueues an action to be performed after at least the specified delay on the execution context.
            </summary>
            <param name="callback">The callback to invoke.</param>
            <param name="delayMilliseconds">The delay in milliseconds.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceExecutionContextExecuteCallback">
            <summary>
            Represents a callback to perfom action syncrhonized with an exeuction context.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceLocalDataProvider">
            <summary>
            Represents a local data provider which has synchronous access to actual data items.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceLocalDataProvider.ItemsSource">
            <summary>
            Gets or sets the local data for the provider.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourcePage">
            <summary>
            Represents a single page of data from a data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourcePage.Count">
            <summary>
            Gets the count of the items in the provider.
            </summary>
            <returns>The count of the items in the provider.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourcePage.GetItemAtIndex(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index from which to fetch the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourcePage.GetItemValueAtIndex(System.Int32,System.String)">
            <summary>
            Gets the property value from the item at the specified index.
            </summary>
            <param name="index">The index from which to fetch the item.</param>
            <param name="valueName">The property name from which to fetch a value.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourcePage.PageIndex">
            <summary>
            The index of the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourcePage.Schema">
            <summary>
            The schema of the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceSchema">
            <summary>
            Represents information about the properties available on items of a data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceSchema.PrimaryKey">
            <summary>
            Represents the primary key of the schema, if available.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceSchema.PropertyNames">
            <summary>
            Represents the property names available in the schema.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceSchema.PropertyTypes">
            <summary>
            Represents the property types matching the property names in the schema.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceSchema.PropertyDataIntents">
            <summary>
            Gets an array of string arrays describing a set of intents for each property on the schema. Returns null if no intents are specified.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType">
            <summary>
            Enumerates the available property types on a data source schema.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.StringValue">
            <summary>
            The property is of type string.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.IntValue">
            <summary>
            The property is of type integer.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.BooleanValue">
            <summary>
            The property is of type boolean.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.LongValue">
            <summary>
            The property is of type long.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.ShortValue">
            <summary>
            The property if of type short.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.DoubleValue">
            <summary>
            The property is of type double.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.DecimalValue">
            <summary>
            The property is of type decimal.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.SingleValue">
            <summary>
            The property is of type single.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.DateTimeValue">
            <summary>
            The property is of type datetime.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.DateTimeOffsetValue">
            <summary>
            The property is of type datetimeoffset.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.ByteValue">
            <summary>
            The property is of type byte.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType.ObjectValue">
            <summary>
            The property is of type object.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DefaultDataSourceSchema">
            <summary>
            A default implemenation of a data source schema.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DefaultDataSourceSchema.#ctor(System.String[],Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType[],System.String[],System.String[][])">
            <summary>
            Constructs a DefaultDataSourceSchema.
            </summary>
            <param name="valueNames">The names of the properties.</param>
            <param name="valueTypes">The types of the named properties.</param>
            <param name="primaryKey">The primary key for the schema.</param>
            <param name="propertyDataIntents">The data intents for the properties.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DefaultDataSourceSchema.PrimaryKey">
            <summary>
            Gets the primary key for the schema.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DefaultDataSourceSchema.PropertyNames">
            <summary>
            Gets the names of the properties for the schema.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DefaultDataSourceSchema.PropertyTypes">
            <summary>
            Gets the property types for the properties.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DefaultDataSourceSchema.PropertyDataIntents">
            <summary>
            Gets an array of string arrays describing a set of intents for each property on the schema. Returns null if no intents are specified.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceUpdateNotifier">
            <summary>
            Represents the events that a data source can notify consumers about.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceUpdateNotifier.RangeActualized(System.Int32,System.Int32)">
            <summary>
            Called when a data source now has real items for a range of items that were previously virtual placeholders.
            </summary>
            <param name="startIndex">The beginning index for the range of items.</param>
            <param name="endIndex">The ending index for the range of items.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceUpdateNotifier.NotifySetItem(System.Int32,System.Object,System.Object)">
            <summary>
            Called when an item is replaced with another item in the data source.
            </summary>
            <param name="index">The index at which the set occured.</param>
            <param name="oldItem">The old item being replaced.</param>
            <param name="newItem">The new item being provided.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceUpdateNotifier.NotifyClearItems">
            <summary>
            Called when a large change occurs in the data source, or the content of the data source has been cleared.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceUpdateNotifier.NotifyInsertItem(System.Int32,System.Object)">
            <summary>
            Called when an item is inserted at an index in the data source.
            </summary>
            <param name="index">The index at which the item was inserted.</param>
            <param name="newItem">The new item that was inserted.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceUpdateNotifier.NotifyRemoveItem(System.Int32,System.Object)">
            <summary>
            Called when an item is removed at an index in the data source.
            </summary>
            <param name="index">The index at which the item was removed.</param>
            <param name="oldItem">The item that was removed.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IDataSourceVirtualDataProvider">
            <summary>
            Represents a virtual data provider for a data source. A virtual data provider is paged and will load requested pages asynchronously.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceVirtualDataProvider.AddPageRequest(System.Int32,Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority)">
            <summary>
            Adds a page request for a given page index and priority.
            </summary>
            <param name="pageIndex">The index of the page to request.</param>
            <param name="priority">The priority of the request.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceVirtualDataProvider.RemovePageRequest(System.Int32)">
            <summary>
            Removes a page request for a given page index.
            </summary>
            <param name="pageIndex">The page index for which to remove the request.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceVirtualDataProvider.RemoveAllPageRequests">
            <summary>
            Removes all page requests from the data provider.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IDataSourceVirtualDataProvider.Close">
            <summary>
            Closes the data provider, destroying its pending work.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceVirtualDataProvider.PageLoaded">
            <summary>
            Gets or sets a callback which is invoked when a page is loaded.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.IDataSourceVirtualDataProvider.PageSizeRequested">
            <summary>
            Gets or sets the desired page size for the provider. This is not necessarily what will be the actual page size.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority">
            <summary>
            Indicates the priority for a page request.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority.Low">
            <summary>
            Indicates a request with low priority.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority.Normal">
            <summary>
            Indicates a request with normal priority.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority.High">
            <summary>
            Indicates a request with high priority.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DataSourcePageLoadedCallback">
            <summary>
            Represents a callback for when a page is successfully loaded by a virtual data source.
            </summary>
            <param name="page">The page that was loaded.</param>
            <param name="currentFullCount">The current full count of the data, if available, else -1.</param>
            <param name="actualPageSize">The resolved page size, which may differ from the requested page size.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.ISectionInformation">
            <summary>
            Gets information about a section in a data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.ISectionInformation.StartIndex">
            <summary>
            Gets the start index of the section.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.ISectionInformation.SectionKey">
            <summary>
            Gets the key for the section.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DefaultSectionInformation">
            <summary>
            Represents information about a section in a data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DefaultSectionInformation.#ctor(System.Int32,System.Object)">
            <summary>
            Constructs a DefaultSectionInformation
            </summary>
            <param name="startIndex">The start index of the section.</param>
            <param name="sectionKey">The key for the section.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DefaultSectionInformation.StartIndex">
            <summary>
            Gets the start index for the section.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.DefaultSectionInformation.SectionKey">
            <summary>
            Gets the key for the section.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.IODataLiteralEmitter">
            <summary>
            Emits OData literals.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.IODataLiteralEmitter.EmitLiteral(System.Object,System.Boolean)">
            <summary>
            Emits a literal value.
            </summary>
            <param name="value">The value to emit.</param>
            <param name="leaveUnquoted">Wheter to leave a string literal unquoted.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.DefaultODataLiteralEmitter">
            <summary>
            A default implementation of an OData literal emitter.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.DefaultODataLiteralEmitter.EmitLiteral(System.Object,System.Boolean)">
            <summary>
            Emits an odata formatted literal.
            </summary>
            <param name="value">The value to emit.</param>
            <param name="leaveUnquoted">Whether the value should be left unquoted if a string.</param>
            <returns>The literal string.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor">
            <summary>
            Visits an a filter expression and emits an odata expression.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor.#ctor">
            <summary>
            Constructs an ODataDataSourceFilterExpressionVisitor.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor.#ctor(Infragistics.Core.Controls.DataSource.IODataLiteralEmitter)">
            <summary>
            Constructs an ODataDataSourceFilterExpressionVisitor providing an alternative literal emitter.
            </summary>
            <param name="literalEmitter">An alternative literal emitter to use.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor.ToString">
            <summary>
            Gets the resulting string to use.
            </summary>
            <returns>The string to use.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor.VisitOperationExpression(Infragistics.Core.Controls.DataSource.OperationFilterExpression)">
            <summary>
            Visits an operation expression.
            </summary>
            <param name="expression">The operation expression to visit.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor.VisitFunctionExpression(Infragistics.Core.Controls.DataSource.FunctionFilterExpression)">
            <summary>
            Visits a function expression.
            </summary>
            <param name="expression">The function expression to visit.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor.VisitLiteralExpression(Infragistics.Core.Controls.DataSource.LiteralFilterExpression)">
            <summary>
            Visits a literal expression.
            </summary>
            <param name="expression">The literal expression to visit.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceFilterExpressionVisitor.VisitPropertyReferenceExpression(Infragistics.Core.Controls.DataSource.PropertyReferenceFilterExpression)">
            <summary>
            Visits a property reference expression.
            </summary>
            <param name="expression">The expression to visit.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.ODataDataSourceSchema">
            <summary>
            Represents the schema of the items within a page of the virtual data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataDataSourceSchema.#ctor(System.String[],Infragistics.Core.Controls.DataSource.DataSourceSchemaPropertyType[],System.String[])">
            <summary>
            Constructs an ODataDataSourceSchema.
            </summary>
            <param name="valueNames">The names of the properties.</param>
            <param name="valueTypes">The types of the properties.</param>
            <param name="primaryKey">The primary key if available.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.ODataDataSourceSchema.PropertyNames">
            <summary>
            Returns the names of the values contained on the items.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.ODataDataSourceSchema.PrimaryKey">
            <summary>
            Returns the names of the values the represent the primary key or composite primary key of the items as a comma seperated string. This may be null or empty if there is no primary key defined.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.ODataDataSourceSchema.PropertyTypes">
            <summary>
            Returns the data types of the values contained on the items.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.ODataDataSourceSchema.PropertyDataIntents">
            <summary>
            Gets an array of string arrays describing a set of intents for each property on the schema.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.ODataSchemaProvider">
            <summary>
            Interrogates an OData data source for its schema.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataSchemaProvider.#ctor(System.String)">
            <summary>
            Constructs an ODataSchemaProvider
            </summary>
            <param name="metadataDocument">The odata metadata document for the OData data source.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.ODataSchemaProvider.GetODataDataSourceSchema(System.String)">
            <summary>
            Gets the data source schema for the provided entity set.
            </summary>
            <param name="entitySet">The entity set to get the schema for.</param>
            <returns>The resulting schema.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.ListSortDirection">
            <summary>
            Enumerates the possible list sort directions.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.ListSortDirection.Ascending">
            <summary>
            Requests an ascending sort.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.DataSource.ListSortDirection.Descending">
            <summary>
            Requests a descending sort.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.SortDescription">
            <summary>
            Represents an element in the current sort applied to a data source or provider. Changes to this object are not observed or expected after it is initially assigned to a collection.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.SortDescription.#ctor(System.String)">
            <summary>
            Constructs a SortDescription.
            </summary>
            <param name="propertyName">The property to sort.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.SortDescription.#ctor(System.String,Infragistics.Core.Controls.DataSource.ListSortDirection)">
            <summary>
            Consturcts a SortDescription.
            </summary>
            <param name="propertyName">The property to sort.</param>
            <param name="direction">The dirction of the sort.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.SortDescription.PropertyName">
            <summary>
            Gets or sets the property being sorted.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataSource.SortDescription.Direction">
            <summary>
            Gets or sets the direction to sort based on the property.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.SortDescription.Equals(System.Object)">
            <summary>
            Returns if the SortDescription is equal to another.
            </summary>
            <param name="other">The SortDescription to compare to.</param>
            <returns>True if the SortDescriptions are equal.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.DataSource.SortDescription.GetHashCode">
            <summary>
            Returns the hash code for the SortDescription.
            </summary>
            <returns>The hash code for the SortDescription.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.DataSource.SortDescriptionCollection">
            <summary>
            Represents a collection of sort elements that are applied to a data source or provider.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataAdapters.DataSeriesMemberIntentAttribute">
            <summary>
            Attribute used to identify the purpose of certain properties to the the data series adapter.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataAdapters.DataSeriesMemberIntentAttribute.#ctor(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent)">
            <summary>
            DataSeriesMemberIntentAttribute constructor.
            </summary>
            <param name="memberIntent">How the data series adapter should treat the property in context.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataAdapters.DataSeriesMemberIntentAttribute.MemberIntent">
            <summary>
            How the data series adapter should treat the property in context.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.DataAdapters.DataSeriesTitleAttribute">
            <summary>
            Attribute used to identify the title of a series being created from a data source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.DataAdapters.DataSeriesTitleAttribute.#ctor(System.String)">
            <summary>
            DataSeriesTitleAttribute constructor.
            </summary>
            <param name="title"></param>
        </member>
        <member name="P:Infragistics.Core.Controls.DataAdapters.DataSeriesTitleAttribute.MemberIntent">
            <summary>
            How the data series adapter should treat the property in context.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.DataAdapters.DataSeriesTitleAttribute.Title">
            <summary>
            The Series Title.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.ILegendSeries">
            <summary>
            A series that can display in a legend.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendSeries.Container">
            <summary>
            The owning legend.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.ILegendSeries.ResolveLegendIndex">
            <summary>
            Returns the index to use in the legend.
            </summary>
            <returns>The index to use.</returns>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendSeries.IsStacked">
            <summary>
            Gets if the legend item is a stacked item.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendSeries.IsVertical">
            <summary>
            Gets if the legend item is a vertical item.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendSeries.IsUsableInLegend">
            <summary>
            Gets if the item is usable in a legend.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendSeries.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendSeries.HasSubItems">
            <summary>
            Gets if the item has subitems.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.ILegendSeries.ForSubItems(System.Action{System.Object})">
            <summary>
            Execute an action for the sub items of the item.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendSeries.HasMarkers">
            <summary>
            Gets if the item has markers.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.ILegendOwner">
            <summary>
            An owner of a legend.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.ILegendOwner.Name">
            <summary>
            Gets the name of the legend owner.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.IChartLegend">
            <summary>
            A legend used for charting.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.IChartLegend.SeriesOwner">
            <summary>
            Gets the series the owns the legend.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.IChartLegend.ChartOwner">
            <summary>
            Gets the chart that owns the legend.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.IChartLegend.ContainsChild(System.Object)">
            <summary>
            Returns if the provided child is present in the legend.
            </summary>
            <param name="child">The child to check for.</param>
            <returns>True, if the child is in the legend.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.IChartLegend.RemoveChild(System.Object)">
            <summary>
            Removes a child from the legend.
            </summary>
            <param name="child">The child to remove</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.IChartLegend.AddChildInOrder(System.Object,Infragistics.Core.Controls.Charts.ILegendSeries)">
            <summary>
            Adds a child, in order, to the legend.
            </summary>
            <param name="legendItem">The legend item.</param>
            <param name="series">The owning series.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.IChartLegend.ClearLegendItemsForSeries(Infragistics.Core.Controls.Charts.ILegendSeries)">
            <summary>
            Clears all items from the legend for a given series.
            </summary>
            <param name="series">The series to clear legend items for.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.IChartLegend.IsItemwise">
            <summary>
            Gets if the legend is item-wise.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.IChartLegend.IsScale">
            <summary>
            Gets if the legend is a scale legend.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.IDataSeriesAdapterRule">
            <summary>
            Represents a rule to determine which data series fit the provided data.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.IDataSeriesAdapterRule.Evaluate(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext)">
            <summary>
            Evaluates the rule given the provided context.
            </summary>
            <param name="context">The context of the evaluation.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.IDataSeriesAdapterRule.Priority">
            <summary>
            Gets the priority of the current rule to break ties if multiple rules want to match an aspect of the data.
            Higher values win.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext">
            <summary>
            Represents the context for a data dataper rule evaluation.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.Analyzer">
            <summary>
            The analyzer in context.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.GetSubProvider(System.Object,System.String)">
            <summary>
            Gets a sub data provider from the current data provider and pushes it as the current data provider.
            </summary>
            <param name="itemsSource">The data to get a provider for.</param>
            <param name="path">The path from the current provider to the new provider.</param>
            <returns>The requested data provider.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.PopSubProvider">
            <summary>
            Pops the current data provider from the provider stack.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.RecurseRules(System.Object,System.String,System.Boolean)">
            <summary>
            Recurses the current rules for a sub data source and path.
            </summary>
            <param name="subDataSource">The sub data source to recurse the rules for.</param>
            <param name="subPath">The path from the current data source to the sub data source.</param>
            <param name="listenForSubPathChanges">True if changes along the path should cause the data provider to re-evaluate.</param>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.IncludedProperties">
            <summary>
            If specified, only the specified properties should be considered in the evaluation, unless excluded.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.ExcludedProperties">
            <summary>
            If specified, the specified properties should be excluded from evaluation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.GetCurrentDataSource">
            <summary>
            Gets the current data provider from the provider stack.
            </summary>
            <returns>The current data provider.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.PushDataSource(Infragistics.Core.Controls.DataSource.IDataSourceLocalDataProvider)">
            <summary>
            Pushes a data provider to the provider stack.
            </summary>
            <param name="dataSource">The provider to push on teh stack.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.PopDataSource">
            <summary>
            Pops a data provider from the provider stack.
            </summary>
            <returns>The popped provider.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.GetCurrentPathSegment">
            <summary>
            Gets the current path segment.
            </summary>
            <returns>The current path segment only.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.GetCurrentPath">
            <summary>
            Gets the full path to the current data provider.
            </summary>
            <returns>The path to the provider.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.GetParentTitle">
            <summary>
            Get's the title resolved for the parent.
            </summary>
            <returns>The title value.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.PushPath(System.String)">
            <summary>
            Pushes a path to the current data path.
            </summary>
            <param name="path">The path value to push.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.PopPath">
            <summary>
            Pops a path segment from the current data path.
            </summary>
            <returns>The popped path segment.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.PushParentTitle(System.String)">
            <summary>
            Pushes a parent title to the current context.
            </summary>
            <param name="parentTitle">The current title value.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.PopParentTitle">
            <summary>
            Pops a parent title from the current context.
            </summary>
            <returns>The popped title.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.AddDataSeries(Infragistics.Core.Controls.Charts.DataAdapters.DataSeries,Infragistics.Core.Controls.Charts.DataAdapters.IDataSeriesAdapterRule)">
            <summary>
            Adds a resolved data series to the evaluation.
            </summary>
            <param name="dataSeries">The data series to add.</param>
            <param name="rule">The rule which generated the data series.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.RemoveDataSeries(Infragistics.Core.Controls.Charts.DataAdapters.DataSeries)">
            <summary>
            Removes a resolved data series from the evaluation.
            </summary>
            <param name="dataSeries"></param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.InsertDataSeries(System.Int32,Infragistics.Core.Controls.Charts.DataAdapters.DataSeries,Infragistics.Core.Controls.Charts.DataAdapters.IDataSeriesAdapterRule)">
            <summary>
            Inserts a resolved data series at a specific position in the evaluation.
            </summary>
            <param name="index">The index to insert the series at.</param>
            <param name="dataSeries">The data series to insert.</param>
            <param name="rule">The rule which generated the data series.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.ClearDataSeries">
            <summary>
            Clears any resolved data series from the evaluation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.GetDataSeriesCount">
            <summary>
            Gets the count of the current resolved data series in the evaluation.
            </summary>
            <returns>The count of the data series.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext.GetDataSeriesAt(System.Int32)">
            <summary>
            Gets a data series at a specific index in the evaluation.
            </summary>
            <param name="index">The index of the data series to retrieve.</param>
            <returns>The retrieved data series.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer">
            <summary>
            A utility class for assisting in analyzing a data adapter evaluation.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.IncludedProperties">
            <summary>
            If specified, only the specified properties should be considered in the evaluation, unless excluded.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.ExcludedProperties">
            <summary>
            If specified, the specified properties should be excluded from evaluation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetParentTitle">
            <summary>
            Gets the current parent title for when a title would useful to resolve.
            </summary>
            <returns>The resolved current parent title.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.ShouldIncludeProperty(System.String,System.String)">
            <summary>
            Returns true if a property should be included in the evaluation.
            </summary>
            <param name="property">The property to check.</param>
            <param name="path">The path to the owner of the property.</param>
            <returns>True if the propety should be included.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.ExpandCamelCasedWords(System.String)">
            <summary>
            Expands a string with camel casing into spaced words.
            </summary>
            <param name="value">The string to expand.</param>
            <returns>The expanded string.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.HasStringProperties">
            <summary>
            Returns true if the current data has string typed properties.
            </summary>
            <returns>True if the current data has string typed properties.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllStringProperties">
            <summary>
            Returns all the string typed properties for the current data.
            </summary>
            <returns>An array of all the string typed properties for the current data.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.IsCollection(System.Object)">
            <summary>
            Returns true if the provided data is a collection.
            </summary>
            <param name="item">The data to check.</param>
            <returns>True if the provided data is a collection.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllPropertiesWithName(System.String)">
            <summary>
            Gets all the properties that match the specified name for the current data.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>All the properties matching the name.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllNumericProperties">
            <summary>
            Gets all the properties with numeric type from the current data.
            </summary>
            <returns>The properties with numeric type from the current data.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllObjectProperties">
            <summary>
            Gets all the non-primitive typed properties from the current data.
            </summary>
            <returns>All the non-primitive typed properties.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllCollectionProperties">
            <summary>
            Gets all the collection typed properties from the current data.
            </summary>
            <returns>All the collection typed properties from the current data.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstNumericProperty">
            <summary>
            Returns the first property from the current data with numeric type.
            </summary>
            <returns>The first numeric typed property.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.HasNumericProperties">
            <summary>
            Returns true if the current data has numeric properties.
            </summary>
            <returns>True if the current data contains numeric properties.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetPropertyType(System.String)">
            <summary>
            Get's the property type for the specified property.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllPropertiesWithIntent(System.String)">
            <summary>
            Returns all properties matching the provided intent.
            </summary>
            <param name="intent">The name of the intent to match.</param>
            <returns>All properties matching the provided intent.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllPropertiesWithValuelessIntent(System.String)">
            <summary>
            Returns all properties matching the provided intent provided they have no specified value.
            </summary>
            <param name="intent">The name of the intent to match.</param>
            <returns>All properties matching the provided intent.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetPropertyIntentValue(System.String,System.String)">
            <summary>
            Returns the value of a valued data intent for a property.
            </summary>
            <param name="intent">The valued intent to search for.</param>
            <param name="property">The property to search for an intent on.</param>
            <returns>The intent value.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllPropertiesWithValuedIntent(System.String)">
            <summary>
            Returns all properties matching the provided intent provided they have a specified value.
            </summary>
            <param name="intent">The name of the intent to match.</param>
            <returns>All properties matching the provided intent.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetAllDateTimeProperties">
            <summary>
            Returns all properties with a datetime type for the current data.
            </summary>
            <returns>All properties with a datetime type for the current data.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstDateTimeProperty">
            <summary>
            Returns the first property of date time type from the current data.
            </summary>
            <returns>The first property with date time type from the current data.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstStringProperty">
            <summary>
            Returns the first property of string type from the current data.
            </summary>
            <returns>The first property of string type from the current data.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.HasDateTimeProperties">
            <summary>
            Returns true if there are date time properties for the current data.
            </summary>
            <returns>True if there are date time properties for the current data.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.IsMonotonic(Infragistics.Core.Controls.DataSource.IDataSourceLocalDataProvider,System.String,System.Int32)">
            <summary>
            Returns true if the provided property monotonically increases or decreases for the specified amount of items to check.
            </summary>
            <param name="provider">The data to check.</param>
            <param name="property">The property to check.</param>
            <param name="monotonicCheckAmount">The amount of items to check.</param>
            <returns>True if the values monotonically increase or decrease.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstDistinctStringProperty(System.Int32)">
            <summary>
            Gets the first string property with distinct values for the check amount.
            </summary>
            <param name="distinctCheckThreshold">The amount of items to check for distinctness.</param>
            <returns>The first string property with distinct values.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstDistinctNumericProperty(System.Int32)">
            <summary>
            Gets the first numeric property with distinct values for the check amount.
            </summary>
            <param name="distinctCheckThreshold">The amount of items to check for distinctness.</param>
            <returns>The first numeric property with distinct values.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstDistinctMonotonicNumericProperty(System.Int32)">
            <summary>
            Gets the first numeric property with distinct values which also monotonically increases or decreases for the given check amount.
            </summary>
            <param name="distinctCheckThreshold">The amount of items to check for distinctness.</param>
            <returns>The first numeric property with distinct values which also monotonically increases or decreases.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstDistinctDateTimeProperty(System.Int32)">
            <summary>
            Gets the first date time property with distinct values for the check amount.
            </summary>
            <param name="distinctCheckThreshold">The amount of items to check for distinctness.</param>
            <returns>The first date time property with distinct values.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetFirstStringPropertyPreferringDistinct(System.Int32)">
            <summary>
            Gets the first string property with distinct values for the check amount, failing that, the first string property.
            </summary>
            <param name="distinctCheckThreshold">The amount of items to check for distinctness.</param>
            <returns>The first string property with distinct values, failing that, the first string property.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetTitleString(System.Object,System.String[])">
            <summary>
            Gets an appropriate resolved title to use for the specified item.
            </summary>
            <param name="specificItem">The item to resolve a title for, or null, if the parent title is desired.</param>
            <param name="specificProperties">The specific properties for which check for a title, or null, if a general title is desired.</param>
            <returns>The resolved title.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesDataProviderAnalyzer.GetNonNullPropertyValue(System.String)">
            <summary>
            Returns a non null value for the requested property.
            </summary>
            <param name="propertyName">The property to get a value for.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries">
            <summary>
            Represents a resolved data series from a data series adapter. Can be used to automatically populate data visualizations.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.#ctor">
            <summary>
            Constructs a DataSeries.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.Name">
            <summary>
            Gets or sets the suggested name to use for this data series.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.Title">
            <summary>
            Gets or sets the suggested title to use for this data series.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.Data">
            <summary>
            Gets or sets the suggested data to use for this data series.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.Priority">
            <summary>
            Gets or sets the priority to use for data series. Priority breaks ties when multiple rules want to infer different data series for the same properties.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.SuggestedPrimaryAxis">
            <summary>
            Gets or sets the suggested primary axis type to use for this data series.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.SuggestedSecondaryAxis">
            <summary>
            Gets or sets the suggested secondary axis type to use for this data series.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.SuggestedSeries">
            <summary>
            Gets or sets the suggested data visualization series type to use for this data series.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.DataPath">
            <summary>
            Gets or sets the suggested path to the data to use for this data series.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.AddMemberPathHint(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint)">
            <summary>
            Adds a member path hint to the current data series. This semantically identifies sub elements of the data for usage.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.RemoveMemberPathHint(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint)">
            <summary>
            Removes a member path hint for the current data series.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.ClearMemberPathHints">
            <summary>
            Clears all the member path hints for the current data series.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.GetMemberPathHintCount">
            <summary>
            Gets the number of member path hints for the current data series.
            </summary>
            <returns>The number of member path hints for the current data series.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.GetMemberPathHintAt(System.Int32)">
            <summary>
            Gets the member path hint at the specified index.
            </summary>
            <param name="index">The index to get the hint for.</param>
            <returns>The requested hint.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.FindMatchingHint(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent)">
            <summary>
            Finds member path hints that match the specified semantic intent.
            </summary>
            <param name="intent">The intent to find a member path hints for.</param>
            <returns>The matches hints, or null if not hints were matched.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeries.Equals(System.Object)">
            <summary>
            Determines if a DataSeriesInfo is equivalent to another.
            </summary>
            <param name="obj">The other DataSeriesInfo.</param>
            <returns>True if the DataSeriesInfos are equivalent.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint">
            <summary>
            Represents a hint about what sub element of a data series data should be mapped to what semantic intent.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint.Path">
            <summary>
            The path to the data from the parent data.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint.Intent">
            <summary>
            The intent of the sub data.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint.Equals(System.Object)">
            <summary>
            Returnes true if the hint is equivalent to another specified hint.
            </summary>
            <param name="obj">The other hint to check.</param>
            <returns>Ture if the hint is equivalent to the other hint.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint.ToString">
            <summary>
            Returns a string representation of the hint.
            </summary>
            <returns>A string representation of the hint.</returns>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint.Update(System.String,System.String)">
            <summary>
            Updates the property name for the current hing.
            </summary>
            <param name="propName">The property name for the hint.</param>
            <param name="propFormat">The format string to use for fomatting the property name.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesMemberPathHint.HasPath">
            <summary>
            Returns true if a path has been specified for the hint.
            </summary>
            <returns>True if a path has been specified for the hint.</returns>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent">
            <summary>
            Identifies various intents for the sub properties of the data being bound to a data series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.PrimarySeriesValue">
            <summary>
            Identifies the primary values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesX">
            <summary>
            Identifies the x axis values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesY">
            <summary>
            Identifies the y axis values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesFill">
            <summary>
            Identifies the fill scale values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesLabel">
            <summary>
            Identifies the legend label values to use for a series in item-wize legends.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesRadius">
            <summary>
            Identifies the radius values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesAngle">
            <summary>
            Identifies the angle values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesShape">
            <summary>
            Identifies the shape values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesValue">
            <summary>
            Identifies the item-wize values to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesGroup">
            <summary>
            Identifies a grouping identifier to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.SeriesTitle">
            <summary>
            Identifies a title to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.OpenSeriesValue">
            <summary>
            Identifies an open value to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.HighSeriesValue">
            <summary>
            Identifies a high value to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.LowSeriesValue">
            <summary>
            Identifies a low value to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.CloseSeriesValue">
            <summary>
            Identifies a close value to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.VolumeSeriesValue">
            <summary>
            Identifies a volume value to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.AxisLabelValue">
            <summary>
            Identifies an axis label value to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.AxisDateValue">
            <summary>
            Identifies an axis date value to use for a series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesIntent.DontPlot">
            <summary>
            Identifies that a value should be ignored when considering values for a series.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType">
            <summary>
            Identifies which type of series is suggested for a data series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Line">
            <summary>
            Used when a line series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Column">
            <summary>
            Used when a column series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Area">
            <summary>
            Used when an area series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Bar">
            <summary>
            Used when a bar series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.StepLine">
            <summary>
            Used when a step line series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.StepArea">
            <summary>
            Used when a step area series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Spline">
            <summary>
            Used when a spline series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.SplineArea">
            <summary>
            Used when a spline area series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Waterfall">
            <summary>
            Used when a waterfall series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Stacked">
            <summary>
            Used when a stacked series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Point">
            <summary>
            Used when a point series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ScatterPoint">
            <summary>
            Used when a scatter point series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ScatterLine">
            <summary>
            Used when a scatter line series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ScatterSpline">
            <summary>
            Used when a scatter spline series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ScatterArea">
            <summary>
            Used when a scatter area series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ScatterContour">
            <summary>
            Used when a scatter contour series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ScatterHighDensity">
            <summary>
            Used when a high density scatter series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ScatterBubble">
            <summary>
            Used when a bubble series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ShapePolygon">
            <summary>
            Used when a polygon series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ShapePolyline">
            <summary>
            Used when a polyline series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.FinancialPrice">
            <summary>
            Used when a financial price series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.FinancialIndicator">
            <summary>
            Used when an financial indicator series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.FinancialOverlay">
            <summary>
            Used when a financial overlay series is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.ValueOverlay">
            <summary>
            Used when a value overlay is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesType.Unknown">
            <summary>
            Specifies unknown series type
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAxisType">
            <summary>
            Indicates which axis type is suggested in a data series.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAxisType.Category">
            <summary>
            Used when a category axis type is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAxisType.Linear">
            <summary>
            Used when a linear axis type is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAxisType.Logarithmic">
            <summary>
            Used when a logarithmic axis type is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAxisType.ContinuousDateTime">
            <summary>
            Used when a continuous date time axis type is suggested.
            </summary>
        </member>
        <member name="F:Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAxisType.DiscreteDateTime">
            <summary>
            Used when a discrete date time axis type is suggested.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.IExternalDataSeriesAdapter">
            <summary>
            Must be implemnted by the public interface of a data series adapter.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.IExternalDataSeriesAdapter.GetDataProvider(System.Object)">
            <summary>
            Gets a local data provider for the given data source.
            </summary>
            <param name="itemsSource">The data source to get the provider for.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleScatterSeriesRule">
            <summary>
            A rule for suggesting potential scatter data series.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleScatterSeriesRule.#ctor">
            <summary>
            Constructs a SimpleScatterSeriesRule.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleScatterSeriesRule.Priority">
            <summary>
            Gets or sets the priority for this rule.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleScatterSeriesRule.MonotonicCheckAmount">
            <summary>
            Gets or sets a threshold to use for checking property monotonicity.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleScatterSeriesRule.Evaluate(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext)">
            <summary>
            Evaluates the rule.
            </summary>
            <param name="context">The context under which to evaluate the rule.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SubCollectionsRule">
            <summary>
            A rule for recursing other rules into sub collections.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SubCollectionsRule.#ctor">
            <summary>
            Constructs a SubCollectionsRule
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SubCollectionsRule.Priority">
            <summary>
            Gets or sets the priority for this rule.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SubCollectionsRule.CollectionTransformationThreshold">
            <summary>
            Gets or sets the item count threshold to check for sub collections.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SubCollectionsRule.Evaluate(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext)">
            <summary>
            Evaluates the rule.
            </summary>
            <param name="context">The context under which to evaluate the rule.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleCategorySeriesRule">
            <summary>
            A rule for suggesting potential category data series.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleCategorySeriesRule.#ctor">
            <summary>
            Constructs a SimpleCategorySeriesRule.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleCategorySeriesRule.Priority">
            <summary>
            Gets or sets the priority for this rule.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleCategorySeriesRule.UseColumnThreshold">
            <summary>
            Gets or sets an item count threshold under which to consider using a column data series.
            </summary>
        </member>
        <member name="P:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleCategorySeriesRule.DistinctCheckThreshold">
            <summary>
            Gets or sets a threshold to use for checking property distinctness.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.Charts.DataAdapters.Rules.SimpleCategorySeriesRule.Evaluate(Infragistics.Core.Controls.Charts.DataAdapters.DataSeriesAdapterRunContext)">
            <summary>
            Evaluates the rule.
            </summary>
            <param name="context">The context under which to evaluate the rule.</param>
        </member>
        <member name="T:Infragistics.Core.Controls.IExecutionContext">
            <summary>
            Represents an execution context upon which work can be synchronized.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.IExecutionContext.Execute(Infragistics.Core.Controls.ExecutionContextExecuteCallback)">
            <summary>
            Executes the requested callback on the context.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.IExecutionContext.EnqueueAction(Infragistics.Core.Controls.ExecutionContextExecuteCallback)">
            <summary>
            Enqueues the requested callback on the context to be executed at earliest opportunity.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.IExecutionContext.EnqueueAnimationAction(Infragistics.Core.Controls.ExecutionContextExecuteCallback)">
            <summary>
            Enqueues the requested callback on the context to be executed at earliest opportunity, to be used for animation.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.IExecutionContext.ExecuteDelayed(Infragistics.Core.Controls.ExecutionContextExecuteCallback,System.Int32)">
            <summary>
            Enqueues the requested callback on the context to be executed after at least the specified delay.
            </summary>
            <param name="callback">The callback to execute.</param>
            <param name="delayMilliseconds">The delay to wait.</param>
        </member>
        <member name="M:Infragistics.Core.Controls.IExecutionContext.GetCurrentRelativeTime">
            <summary>
            Gets the current relative time in milliseconds that has elapsed since the execution context was created.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Core.Controls.ExecutionContextExecuteCallback">
            <summary>
            Represents a callback to perfom action syncrhonized with an exeuction context.
            </summary>
        </member>
        <member name="T:Infragistics.Core.Controls.SyncableObservableCollection`1">
            <summary>
            An observable collection that can sync with another.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Infragistics.Core.Controls.SyncableObservableCollection`1.SyncTarget">
            <summary>
            Gets or sets another SyncableObservableColleciton to sync with.
            </summary>
        </member>
        <member name="M:Infragistics.Core.Controls.SyncableObservableCollection`1.#ctor">
            <summary>
            Constructs a SyncableObservableCollection.
            </summary>
        </member>
        <member name="T:Infragistics.Core.FastData.IFastItemsSource">
            <summary>
            Represents an efficient retrieval of items from a data source.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FastData.IFastItemsSource.Item(System.Int32)">
            <summary>
            Gets the item that the requested index.
            </summary>
            <param name="i">The index from which to request an item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.IndexOf(System.Object)">
            <summary>
            Gets the index of the requested item.
            </summary>
            <param name="item">The item to get the index for.</param>
            <returns>The requested index.</returns>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.RegisterColumn(System.String)">
            <summary>
            Gets a column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.DeregisterColumn(Infragistics.Core.FastData.IFastItemColumnPropertyName)">
            <summary>
            Deregisters a column.
            </summary>
            <param name="fastItemColumn">The column to deregister.</param>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.RegisterColumnInt(System.String)">
            <summary>
            Gets an integer column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.RegisterColumnObject(System.String)">
            <summary>
            Gets an object column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.RegisterColumnDateTime(System.String)">
            <summary>
            Gets a date time column for a specific property name.
            </summary>
            <param name="propertyName">The property to get a column for.</param>
            <returns>The column for the property.</returns>
        </member>
        <member name="E:Infragistics.Core.FastData.IFastItemsSource.Event">
            <summary>
            Indicates that the data has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FastData.IFastItemsSource.Count">
            <summary>
            Gets the number of records in the items source.
            </summary>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.HandleCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies of a collection event.
            </summary>
            <param name="e">The collection event.</param>
        </member>
        <member name="M:Infragistics.Core.FastData.IFastItemsSource.ContentsAsIList">
            <summary>
            Fetches the contents as an IList
            </summary>
            <returns>the IList</returns>
        </member>
        <member name="T:Infragistics.Core.FastData.FastItemsSourceEventAction">
            <summary>
            Describes available actions that can cause a DataSource event. 
            </summary>
        </member>
        <member name="F:Infragistics.Core.FastData.FastItemsSourceEventAction.Remove">
            <summary>
            One or more rows were removed from the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Core.FastData.FastItemsSourceEventAction.Insert">
            <summary>
            One or more rows were added to the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Core.FastData.FastItemsSourceEventAction.Replace">
            <summary>
            One or more rows were replaced in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Core.FastData.FastItemsSourceEventAction.Change">
            <summary>
            An item property value changed in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Core.FastData.FastItemsSourceEventAction.Reset">
            <summary>
            The entire data source contents were reset.
            </summary>
        </member>
        <member name="T:Infragistics.Core.FastData.FastItemsSourceEventArgs">
            <summary>
            Provides data for the CollectionChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.Core.FastData.FastItemsSourceEventArgs.#ctor(Infragistics.Core.FastData.FastItemsSourceEventAction,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="position"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Core.FastData.FastItemsSourceEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="propertyName"></param>
        </member>
        <member name="P:Infragistics.Core.FastData.FastItemsSourceEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Infragistics.Core.FastData.FastItemsSourceEventArgs.Position">
            <summary>
            Gets the position of the modified rows.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FastData.FastItemsSourceEventArgs.Count">
            <summary>
            Gets the number of modified rows.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FastData.FastItemsSourceEventArgs.PropertyName">
            <summary>
            Gets the name of the modified property.
            </summary>
        </member>
        <member name="T:Infragistics.Core.FastData.IFastItemColumn`1">
            <summary>
            Represents the public view of a FastItemsSource column.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FastData.IFastItemColumn`1.Minimum">
            <summary>
            Gets the column's minimum value.
            </summary>
            <remarks>
            The minimum is calculated in amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Core.FastData.IFastItemColumn`1.Maximum">
            <summary>
            Gets the column's maximum value.
            </summary>
            <remarks>
            The maximum is calculated in amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Core.FastData.IFastItemColumn`1.MayContainUnknowns">
            <summary>
            Gets if the data may contain unknown values (null, NaN, etc).
            </summary>
        </member>
        <member name="T:Infragistics.Core.FastData.IFastItemColumnPropertyName">
            <summary>
            Interface for objects which store a property name to be used in a FastItemColumn.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FastData.IFastItemColumnPropertyName.PropertyName">
            <summary>
            Gets the column's property name.
            </summary>
        </member>
        <member name="T:Infragistics.Core.FlattenerSettings">
            <summary>
            A singleton set of settings for the flattener to resolve various edge cases.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FlattenerSettings.Instance">
            <summary>
            Gets the settings instance.
            </summary>
        </member>
        <member name="P:Infragistics.Core.FlattenerSettings.ChunkingAmount">
            <summary>
            Gets or sets the chunking amount to use when flattening visuals.
            </summary>
        </member>
        <member name="T:Infragistics.Core.PolySimplification">
            <summary>
            Utility class for polygon simpliciation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.PolySimplification.VertexReduction(System.Tuple{System.Double[],System.Double[]},System.Double)">
            <summary>
            Simple vertex reduction algorithm.
            Complexity: O(n)
            
            Summary:
            Include P0 in the result, and set R = P0. Iterate through subsequent points P1,P2,... until distance(PN, R) > tolerance.
            Include PN in the result, and set R = PN. Continue iterating in this fashion until there are no more points to consider for inclusion.
            
            </summary>
            <param name="points">Input list of points</param>
            <param name="tolerance">The minimum distance allowed between adjacent points</param>
            <returns>List of accepted points</returns>
        </member>
        <member name="M:Infragistics.Core.PolySimplification.SquareDistance(Infragistics.Core.Point,Infragistics.Core.Point)">
            <summary>
            Returns the square of the distance between p1 and p2.
            </summary>
        </member>
        <member name="T:Infragistics.Core.EasingFunctions">
            <summary>
            Represent some build in easing functions for use with the components.
            </summary>
        </member>
        <member name="M:Infragistics.Core.EasingFunctions.CubicEase(System.Double)">
            <summary>
            Represents a cubic in-out easing function.
            </summary>
            <param name="t">Input time</param>
            <returns>Output progress</returns>
        </member>
        <member name="M:Infragistics.Core.EasingFunctions.ExponentialEase(System.Double)">
            <summary>
            Represents an exponential in-out easing function.
            </summary>
            <param name="t">Input time.</param>
            <returns>Output progress.</returns>
        </member>
        <member name="M:Infragistics.Core.EasingFunctions.CircleEase(System.Double)">
            <summary>
            Represents an circle in-out easing function.
            </summary>
            <param name="t">Input time.</param>
            <returns>Output progress.</returns>
        </member>
        <member name="T:Infragistics.Core.ITickProvider">
            <summary>
            Represents an a driver than can provide timing support for animation engines.
            </summary>
        </member>
        <member name="M:Infragistics.Core.ITickProvider.SetupTicking(System.Action)">
            <summary>
            Sets up a ticker that will invoke the specified callback when requested.
            </summary>
            <param name="callback">The callback method to invoke.</param>
            <returns>And identifier for the ticker.</returns>
        </member>
        <member name="M:Infragistics.Core.ITickProvider.RequestFrame(System.Int32)">
            <summary>
            Requests a frame to tick for the identified ticker. The ticker's callback will be invoked at earliest opportunity.
            </summary>
            <param name="id">The id of the ticker to schedule a tick for.</param>
        </member>
        <member name="M:Infragistics.Core.ITickProvider.TeardownTicking(System.Int32)">
            <summary>
            Requests that the ticker identified by the id is torn down.
            </summary>
            <param name="id">The id of the ticker to tear down.</param>
        </member>
        <member name="T:Infragistics.Core.IExternalizable">
            <summary>
            Indicates an object that can return an externalized version.
            </summary>
        </member>
        <member name="M:Infragistics.Core.IExternalizable.ToExternalObject">
            <summary>
            Gets the externalized version of an object.
            </summary>
            <returns>The externalized version.</returns>
        </member>
        <member name="T:Infragistics.Core.DoubleAnimator">
            <summary>
            Class for facilitating the animation of Double values.
            </summary>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.TickProvider">
            <summary>
            Gets or sets the tick provider for the animation. 
            </summary>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.NeedsFlush">
            <summary>
            Gets if the DoubleAnimator is in a state where it may need flushing.
            </summary>
        </member>
        <member name="M:Infragistics.Core.DoubleAnimator.Flush">
            <summary>
            Forces a tick of the animator to make sure it has ticked at least once.
            </summary>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.TransitionProgress">
            <summary>
            Gets the current progress of the animation.
            </summary>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.IntervalMilliseconds">
            <summary>
            The total number of milliseconds in the interval.
            </summary>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.EasingFunction">
            <summary>
            Gets or sets the easing function to use for the animation.
            </summary>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.From">
            <summary>
            Gets or sets the value to animate from.
            </summary>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.To">
            <summary>
            Gets or sets the value to animate to.
            </summary>
        </member>
        <member name="M:Infragistics.Core.DoubleAnimator.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            DoubleAnimator constructor.
            </summary>
            <param name="from">The double value to start the animation at.</param>
            <param name="to">The double value to end the animation at.</param>
            <param name="intervalMilliseconds">The span of time it should take for the animation to complete.</param>
        </member>
        <member name="P:Infragistics.Core.DoubleAnimator.Active">
            <summary>
            Gets or sets whether the animation is active.
            </summary>
        </member>
        <member name="M:Infragistics.Core.DoubleAnimator.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.DoubleAnimator.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.DoubleAnimator.Tick">
            <summary>
            Ticks the animation.
            </summary>
        </member>
        <member name="M:Infragistics.Core.DoubleAnimator.AnimationActive">
            <summary>
            Method which returns a boolean indicating whether or not the animation is active.
            </summary>
            <returns>True if the animation is active, otherwise False.</returns>
        </member>
        <member name="E:Infragistics.Core.DoubleAnimator.PropertyChanged">
            <summary>
            Event raised any time a property value is changed.
            </summary>
        </member>
        <member name="T:Infragistics.Core.EasingFunctionHandler">
            <summary>
            Represents an easing function for an animation.
            </summary>
            <param name="time">The input type for the function between 0 and 1</param>
            <returns>The output progress (0 is beginning, 1 is end, unclamped).</returns>
        </member>
        <member name="T:Infragistics.Core.MathUtil">
            <summary>
            Provides utility methods for math operations.
            </summary>
        </member>
        <member name="F:Infragistics.Core.MathUtil.PHI">
            <summary>
            Represents the golden mean.
            </summary>
        </member>
        <member name="F:Infragistics.Core.MathUtil.SQRT2">
            <summary>
            Represents the square root of 2.0
            </summary>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Asinh(System.Double)">
            <summary>
            Returns the inverse hyperbolic sine of the specified angle.
            </summary>
            <param name="angle">An angle, measured in radians</param>
            <returns>Inverse hyperbolic sine of the specified angle.</returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Hypot(System.Double,System.Double)">
            <summary>
            Calculates the length of the hypotenuse of a right-angled triangle based
            on the lengths of two sides x and y.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Sqr(System.Double)">
            <summary>
            Calculates the square of a x.
            </summary>
            <param name="x"></param>
            <returns>The square of x</returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.GammaLn(System.Double)">
            <summary>
            Returns the natural logarithm of the gamma function, Γ(x).
            </summary>
            <param name="x">The value for which you want to calculate GammaLn.</param>
            <returns>The logarithm of the gamma function, NaN for x less than or equal to zero.</returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns the specified value clamped to the specified range.
            </summary>
            <param name="value">Value to clamp.</param>
            <param name="minimum">Range minimum.</param>
            <param name="maximum">Range maximum.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Radians(System.Double)">
            <summary>
            Converts the specified angle to radians.
            </summary>
            <param name="degrees">Angle in degrees.</param>
            <returns>Angle as radians.</returns>
        </member>
        <member name="F:Infragistics.Core.MathUtil.DegreeAsRadian">
            <summary>
            Constant used for converting degrees to radians.
            </summary>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Degrees(System.Double)">
            <summary>
            Converts the specified angle to degrees.
            </summary>
            <param name="radians">Angle in radians.</param>
            <returns>Angle as degrees.</returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Noise(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Perlin noise value at the specified location.
            </summary>
            <param name="x">x location in noise space</param>
            <param name="y">y location in noise space</param>
            <param name="z">z location in noise space</param>
            <returns>Noise value.</returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.NiceFloor(System.Double)">
            <summary>
            Returns a nicely rounded value less than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.NiceRound(System.Double)">
            <summary>
            Rounds a decimal value to the nearest nice number.
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.NiceCeiling(System.Double)">
            <summary>
            Returns a nicely rounded value greater than or equal to the specified value
            </summary>
            <param name="value">Value to round.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Min3(System.Double,System.Double,System.Double)">
            <summary>
            Returns minimum of the given three numeric values
            </summary>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Max3(System.Double,System.Double,System.Double)">
            <summary>
            Returns maximum of the given three numeric values
            </summary>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Min(System.Double[])">
            <summary>
            Returns minimum of the given numeric parameters.
            </summary>
            <param name="a">The numeric parameters from which to return the minimum value.</param>
            <returns>The lowest of the given numeric parameters.</returns>
        </member>
        <member name="M:Infragistics.Core.MathUtil.Max(System.Double[])">
            <summary>
            Returns maximum of the given numeric parameters.
            </summary>
            <param name="a">The numeric parameters from which to return the maximum value.</param>
            <returns>The highest of the given numeric parameters.</returns>
        </member>
        <member name="T:Infragistics.Core.RearrangedList`1">
            <summary>
            List class for known lists which are reordered.
            </summary>
            <typeparam name="T">The Type of items in the list.</typeparam>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            RearrangedList constructor.
            </summary>
            <param name="inner">The original list.</param>
            <param name="indexes">A list of indices, representing the order of items in the RearrangedList.</param>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.IndexOf(`0)">
            <summary>
            Gets the index of the given item.
            </summary>
            <param name="item">The item under observation.</param>
            <returns>The index of the given item.</returns>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>        
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="P:Infragistics.Core.RearrangedList`1.Item(System.Int32)">
            <summary>
            RearrangedList indexer.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.Contains(`0)">
            <summary>
            Checks whether or not the item is present in the collection.
            </summary>
            <param name="item">The item under observation.</param>
            <returns>True if the item is present in the collection, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items in the collection to the array, starting at the specified index.
            </summary>
            <param name="array">The array to add collection items to.</param>
            <param name="arrayIndex">The index at which to start the copy operation.</param>
        </member>
        <member name="P:Infragistics.Core.RearrangedList`1.Count">
            <summary>
            The total number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Core.RearrangedList`1.IsReadOnly">
            <summary>
            Boolean indicating whether or not the collection is read-only.
            </summary>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.Remove(`0)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found and removed, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Core.RearrangedList`1.GetEnumerator">
            <summary>
            Gets the enumerator for iterating through all items in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Portable.FastItemColumn">
            <summary>
            Represents a cached column of doubles in a fast datasource.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemDateTimeColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemDateTimeColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemObjectColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemObjectColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemIntColumn.Minimum">
            <summary>
            Gets the minimum value for the current column.
            </summary>
            <remarks>
            Getting the minimum value takes amortized constant time.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.FastItemIntColumn.Maximum">
            <summary>
            Gets the maximum value for the current column.
            </summary>
            <remarks>
            Getting the maximum value takes amortized constant time.
            </remarks>
        </member>
        <member name="T:Infragistics.Portable.FastItemsSource">
            <summary>
            Represents a view of an enumerable items source
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.#ctor">
            <summary>
            FastItemsSource constructor.
            </summary>
        </member>
        <member name="E:Infragistics.Portable.FastItemsSource.Event">
            <summary>
            The FastItemsSourceEvent, which is raised when the collection is updated.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.ItemsSource">
            <summary>
            The enumerable list of objects to get data from.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.Detach">
            <summary>
            Detaches this instance by removing old listeners.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.Attach">
            <summary>
            Attaches this instance by adding new listeners.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.Count">
            <summary>
            Gets the number of items in the current FastItemsSource object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.Item(System.Int32)">
            <summary>
            Gets the items at the specified position.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.GetEnumerator">
            <summary>
            Gets the IEnumerator used for looping through the FastItemsSource.
            </summary>
            <returns>The IEnumerator used for looping through the FastItemsSource.</returns>
        </member>
        <member name="P:Infragistics.Portable.FastItemsSource.Item(System.Object)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The item to get the index for.</param>
            <returns>The index of the specified item.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumnDateTime(System.String)">
            <summary>
            Returns a DateTime FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>A DateTime FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumnObject(System.String)">
            <summary>
            Returns an object FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>An object FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumnInt(System.String)">
            <summary>
            Returns an integer FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>An integer FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.RegisterColumn(System.String)">
            <summary>
            Returns a FastItemColumn for the given property name.
            </summary>
            <param name="propertyName">The name of the property on the data items which is used to populate the FastItemColumn.</param>
            <returns>A FastItemColumn for the given property name.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastItemsSource.DeregisterColumn(Infragistics.Core.FastData.IFastItemColumnPropertyName)">
            <summary>
            Uninitializes the FastItemColumn with the given property name.
            </summary>
            <param name="fastItemColumn">The object responsible for providing the property name of the FastItemColumn.</param>
        </member>
        <member name="T:Infragistics.Portable.IFastItemsSourceProvider">
            <summary>
            Implementors are providers of FastItemsSource instances.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSourceProvider.GetFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Gets a fast item source for the target enumerable.
            </summary>
            <param name="target">The enumerable to get the FastItemsSource for.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="M:Infragistics.Portable.IFastItemsSourceProvider.ReleaseFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Releases a FastItemsSource reference.
            </summary>
            <param name="itemsSource">The enumerable for which to release the FastItemsSource.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="T:Infragistics.Portable.FastReflectionHelper">
            <summary>
            A reflection strategy that uses either traditional reflection or compiled lambda expressions
            to get property values from an object.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.#ctor">
            <summary>
            Constructs the fast reflection helper.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.#ctor(System.Boolean,System.String)">
            <summary>
            Constructs the fast reflection helper.
            </summary>
            <param name="useTraditionalReflection">Should the helper use traditional (slower) reflection.</param>
            <param name="propertyName">The propertyname this will be reflecting on.</param>
        </member>
        <member name="P:Infragistics.Portable.FastReflectionHelper.PropertyName">
            <summary>
            Gets or sets the property name of the current FastReflectionHelper object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastReflectionHelper.UseTraditionalReflection">
            <summary>
            Indicates that current FastReflectionHelper object is not using compiled expressions.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.FastReflectionHelper.Invalid">
            <summary>
            Returns true if the fast reflection helper is invalid, probably due to a lack of a property name.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.GetPropertyValue(System.Object)">
            <summary>
            Gets the property value from the specified item.
            </summary>
            <param name="item"></param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="M:Infragistics.Portable.FastReflectionHelper.GetPropertyValue(System.Type,System.Object)">
            <summary>
            Gets the property value for the specified item.
            </summary>
            <param name="itemType">The item type.</param>
            <param name="item">The item containing the property.</param>
            <returns>Property value or null if the property value cannot be determined.</returns>
        </member>
        <member name="T:Infragistics.Portable.FontUtil">
            <summary>
            Utility class for math operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.FontUtil.GetCurrentFontHeight(Infragistics.Portable.FontInfo)">
            <summary>
            Uses the font on temporarily added span added to the
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.FontUtil.GetFont(System.Object)">
            <summary>
            Takes a jquery container and extracts the font property of it
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.FontUtil.MeasureStringWidth(System.String,Infragistics.Portable.FontInfo,Infragistics.Portable.RenderingContext)">
            <summary>
            Returns the width of a string in pixels
            </summary>
        </member>
        <member name="T:Infragistics.Portable.BrushCollection">
            <summary>
            Simple collection of Brush objects
            </summary>
        </member>
        <member name="P:Infragistics.Portable.BrushCollection.IsDirty">
            <summary>
            Indicates that a brush collection is dirty.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.BrushCollection.SelectRandom">
            <summary>
            Returns a random brush in the collection.
            </summary>
            <returns>A random brush in this collection.</returns>
        </member>
        <member name="M:Infragistics.Portable.BrushCollection.InterpolateRandom">
            <summary>
            Returns a random brush interpolated from the brushes in this collection.
            </summary>
            <returns>A random brush interpolated from the brushes in this collection.</returns>
        </member>
        <member name="P:Infragistics.Portable.BrushCollection.InterpolationMode">
            <summary>
            Sets or gets the interpolation mode used to interpolate brushes.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.BrushCollection.Item(System.Int32)">
            <summary>
            Gets or sets a brush at the specified index.
            </summary>
            <param name="index">The index of the brush to return.</param>
            <returns>A brush for the specified index.</returns>
        </member>
        <member name="M:Infragistics.Portable.BrushCollection.GetInterpolatedBrush(System.Double)">
            <summary>
            Gets the brush at the specified index.  If index is not an integer, the result of this function call will be a brush interpolated between the brushes at the previous and following index values.
            </summary>
            <param name="index">The index of the brush to return.</param>
            <returns>The brush at the specified index, or if the specified index is not an integer, an interpolated brush between the previous and next index.</returns>
        </member>
        <member name="M:Infragistics.Portable.BrushCollection.Equals(System.Object)">
            <summary>
            Determines if a BrushCollection is equivalent to another.
            </summary>
            <param name="obj">The other BrushCollection.</param>
            <returns>True if the BrushCollections are equivalent.</returns>
        </member>
        <member name="T:Infragistics.Portable.CustomContentUpdateInfo">
            <summary>
            Represents contextual information about the custom content being generated or updated.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.CustomContentUpdateInfo.#ctor">
            <summary>
            Constructs a CustomContentUpdateInfo.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.CustomContentUpdateInfo.GetItem(System.String)">
            <summary>
            Gets a named value from the info.
            </summary>
            <param name="key">The key for the value to retrieve.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:Infragistics.Portable.CustomContentUpdateInfo.SetItem(System.String,System.Object)">
            <summary>
            Sets a named value for the info.
            </summary>
            <param name="key">The name for the value.</param>
            <param name="item">The value to set.</param>
        </member>
        <member name="T:Infragistics.Portable.DoubleValueChangedEventArgs">
            <summary>
            Provides data for double value change events. 
            </summary>
        </member>
        <member name="M:Infragistics.Portable.DoubleValueChangedEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            DoubleValueChangedEventArgs constructor.
            </summary>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Portable.DoubleValueChangedEventArgs.OldValue">
            <summary>
            Gets the value before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.DoubleValueChangedEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.RectChangedEventArgs">
            <summary>
            Provides data for rectangle changed events. 
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectChangedEventArgs.#ctor(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            RectChangedEventArgs constructor.
            </summary>
            <param name="oldRect">The previous value of the rectangle which is changing.</param>
            <param name="newRect">The new value of the rectangle which is changing.</param>
        </member>
        <member name="P:Infragistics.Portable.RectChangedEventArgs.OldRect">
            <summary>
            Gets the rectangle before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.RectChangedEventArgs.NewRect">
            <summary>
            Gets the new rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ScreenRectChangedEventArgs">
            <summary>
            Provides data for rectangle changed events. 
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ScreenRectChangedEventArgs.#ctor(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            RectChangedEventArgs constructor.
            </summary>
            <param name="oldRect">The previous value of the rectangle which is changing.</param>
            <param name="newRect">The new value of the rectangle which is changing.</param>
        </member>
        <member name="P:Infragistics.Portable.ScreenRectChangedEventArgs.OldRect">
            <summary>
            Gets the rectangle before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.ScreenRectChangedEventArgs.NewRect">
            <summary>
            Gets the new rectangle.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.SkiaSharpCanvasRenderer.CreateCubicApproximations(System.Double,System.Double,System.Double,System.Double,Infragistics.Portable.Point,Infragistics.Portable.Graphics.Media.PolyBezierSegment)">
            <summary>
            The math here is based on A. Riskus, "Approximation of a Cubic Bezier Curve by Circular Arcs and Vice Versa," 
            Information Technology and Control, 35(4), 2006 pp. 371-378.
            </summary>
            <param name="startAngle"></param>
            <param name="endAngle"></param>
            <param name="sizeX"></param>
            <param name="sizeY"></param>
            <param name="center"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Portable.Controls.InterpolationUtil">
            <summary>
            Provides utility methods for interpolating points.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.InterpolationUtil.InterpolatePoints(System.Collections.Generic.List{Infragistics.Portable.Point},System.Double,System.Collections.Generic.List{Infragistics.Portable.Point},System.Collections.Generic.List{Infragistics.Portable.Point})">
            <summary>
            Interpolates points
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.InterpolationUtil.InterpolateValues``1(System.Collections.Generic.List{``0},System.Double,System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Func{``0},System.Func{System.Double,System.Double,``0,``0,``0})">
            <summary>
            Interpolates values
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit">
            <summary>
            Methods for linear least squares fitting.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.Test">
            <summary>
            Runs the built-in test suite.
            </summary>
            <returns>true if all tests pass</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LinearFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the linear least squares fit y=A+Bx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFitting.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LinearEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LinearTest">
            <summary>
            Tests linear fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LogarithmicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the logarithmic least squares fit y=A+Blnx
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the x is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Logarithmic." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingLogarithmic.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LogarithmicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*ln(x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.LogarithmicTest">
            <summary>
            Tests logarithmic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.ExponentialFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the exponential least squares fit y=Ae^(Bx)
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN or the y is not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Exponential." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingExponential.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.ExponentialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*e^(a[1]*x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.ExponentialTest">
            <summary>
            Tests exponential fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PowerLawFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the power law least squares fit y=A(x^B)
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN not positive, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Power Law." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPowerLaw.html 
            </para>
            </remarks>
            <returns>A, B as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PowerLawEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]*(a[1]^x)
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PowerLawTest">
            <summary>
            Tests power law fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuadraticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuadraticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuadraticTest">
            <summary>
            Tests quadratic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.CubicFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.CubicEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.CubicTest">
            <summary>
            Tests cubic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuarticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuarticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuarticTest">
            <summary>
            Tests quartic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuinticFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2+a3x^3+a4x^4+a5x^5
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuinticEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the linear function y=a[0]+a[1]*x+a[2]*x^2+a3x^3
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.QuinticTest">
            <summary>
            Tests quintic fitting.
            </summary>
            <returns>true if tests pass.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PolynomialFit(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Creates coefficients for the polynomial least squares fit y=a0+a1x+a2x^2..
            </summary>
            <param name="n">Number of items in the series.</param>
            <param name="k">Polynomial order.</param>
            <param name="x">Delegate which returns the nth x value.</param>
            <param name="y">Delegate which returns the nth y value.</param>
            <remarks>
            If either of the x or y for a given point are NaN, the point is not taken
            into account for the fitting operation. Infinite values are valid, but
            are likely to result in significant numerical instability.
            <para>
            Weisstein, Eric W. "Least Squares Fitting--Polynomial." From MathWorld--A Wolfram Web Resource.
            http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html
            </para>
            </remarks>
            <returns>Polynomial coefficients a0, a1, .. ak as an array of doubles or null if no solution.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PolynomialEvaluate(System.Double[],System.Double)">
            <summary>
            Evaluate the function y=a[0]+a[1]*x+a[2]*x^2+ .. +a[n-1]*x^[n-1]
            </summary>
            <param name="a">function coefficients</param>
            <param name="x">function evaluation point</param>
            <returns>Evaluated function, or NaN if the function cannot be evaluated</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.LeastSquaresFit.PolynomialTest(System.Int32)">
            <summary>
            Tests polynomial fitting.
            </summary>
            <param name="k">Polynomial order to test.</param>
            <returns>true if tests pass.</returns>
        </member>
        <member name="T:Infragistics.Portable.Controls.Charts.Util.Numeric">
            <summary>
            Base class for algorithms which work on indexed series of numbers.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.#ctor">
            <summary>
            Creates and initialises a default, empty Numeric object.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Controls.Charts.Util.Numeric.ComparableDelegate">
            <summary>
            Delegate which returns an indexed comparable.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Solve(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            Solve a linear tridiagonal matrix system
            </summary>
            <returns>True if system has been correctly solved.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Solve(System.Double[0:,0:],System.Double[])">
            <summary>
            Solve a system of linear equations using gauss-jordan eliminiation
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>True if system has been correctly solved.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.SafeCubicSplineFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for cubic spline interpolation
            of the tabultated function represented by Count, x, y.
            </summary>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <remarks>
            The presence of double.NaN in the input will result in local double.NaN
            in the output.
            </remarks>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.CubicSplineFit(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for natural or clamped cubic spline interpolation
            of the tabultated function represented by x, y.
            </summary>
            <remarks>
            The presence of double.NaN in the input will result in completely invalid output.
            </remarks>
            <param name="start">The index of the first sample.</param>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.CubicSplineFit(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double,System.Double)">
            <summary>
            Evaluates the coefficients for natural or clamped cubic spline interpolation
            of the tabultated function represented by x, y.
            </summary>
            <remarks>
            The presence of double.NaN in the input will result in completely invalid output.
            </remarks>
            <param name="count">The number of samples.</param>
            <param name="x">Delegate returning the x value for the ith sample.</param>
            <param name="y">Delegate returning the x value for the ith sample.</param>
            <param name="yp1">First derivative at first point (use double.NaN for natural spline)</param>
            <param name="ypn">First derivative at last point (use double.NaN for natural spline)</param>
            <returns>Coefficients for the cubic spline interpolation</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.CubicSplineEvaluate(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates a cubic spline interpolation
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Spline2D(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Returns a 2D spline fitting of the data.
            </summary>
            <param name="count">The number of points being inputted.</param>
            <param name="x">Provides the X input values based on index.</param>
            <param name="y">Provides the Y input values based on index.</param>
            <param name="stiffness">The spline stiffness parameter to use.</param>
            <returns>The path figure collection representing the fitted spline.</returns>
        </member>
        <member name="M:Infragistics.Portable.Controls.Charts.Util.Numeric.Spline2D(System.Int32,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Returns a 2D spline fitting of the data.
            </summary>
            <param name="startIndex">The index to start from.</param>
            <param name="endIndex">The ending index.</param>
            <param name="x">Provides the X input values based on index.</param>
            <param name="y">Provides the Y input values based on index.</param>
            <param name="stiffness">The spline stiffness parameter to use.</param>
            <returns>The path figure collection representing the fitted spline.</returns>
        </member>
        <member name="T:Infragistics.Portable.Clipper">
            <summary>
            Modified Sutherland-Hodge clipping
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Clipper.Target">
            <summary>
            Destination target for clipped points.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Clipper.#ctor(Infragistics.Portable.Rect,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="clip">Clip rectangle</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="M:Infragistics.Portable.Clipper.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the Clipper class.
            </summary>
            <param name="left">Left edge of clip rectangle or NaN.</param>
            <param name="bottom">Bottom edge of clip rectangle or NaN.</param>
            <param name="right">Right edge of clip rectangle or NaN.</param>
            <param name="top">Top edge of clip rectangle or NaN.</param>
            <param name="isClosed">True to clip as polygon, false to clip as polyline</param>
        </member>
        <member name="M:Infragistics.Portable.Clipper.Add(Infragistics.Portable.Point)">
            <summary>
            Adds a Point to the clipper.
            </summary>
            <param name="point">The Point to be considered in the clipping operation.</param>
        </member>
        <member name="P:Infragistics.Portable.Clipper.IsClosed">
            <summary>
            Boolean value. True if the clipper is configured to perform closed-shape clipping, else false.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.EdgeClipper">
            <summary>
            Represents a clipping stage in the Sutherland-Hodge clipper.
            </summary>
            <remarks>
            EdgeClipper implements IList so that it can be transparently
            pipe to either another edge clipper or a "real" IList implementation.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.EdgeClipper.Dst">
            <summary>
            Sets or gets the destination for the current edge clipper object.
            </summary>
            <remarks>
            Setting an edge clipper's destination resets the stage.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.Add(Infragistics.Portable.Point)">
            <summary>
            Adds a point to the current edge clipper, resulting in zero, one or two
            points being piped to the desitnation IList.
            </summary>
            <param name="cur">Point to add to the clipping stage.</param>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.Clear">
            <summary>
            Flushes the edge clipping stage.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.IsInside(Infragistics.Portable.Point)">
            <summary>
            Gets the status of the point with respect to the current clipping stage's edge.
            </summary>
            <param name="pt">Point to test</param>
            <returns>True if the point is inside or on the edge, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Portable.EdgeClipper.Intersection(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Gets the intersection of an edge with the current clipping stage's edge.
            </summary>
            <param name="b">Start of edge</param>
            <param name="e">End of edge</param>
            <returns>Intersection of edge with the current clipping stage's edge</returns>
        </member>
        <member name="T:Infragistics.Portable.LeftClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's left edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.BottomClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's bottom edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.RightClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's right edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.TopClipper">
            <summary>
            Represents a specialised clipping stage for a clip window's top edge.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Flattener">
            <summary>
            Utility class for line flattening.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Spiral(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Flatten the specified Archimidean spiral curve with the maximum specified area error.
            </summary>
            <param name="startAngle">Curve start angle in radians.</param>
            <param name="startRadius">Curve start radius.</param>
            <param name="endAngle">Curve end angle in radians.</param>
            <param name="endRadius">Curve end radius.</param>
            <param name="error">Maximum error between approximation and spiral.</param>
            <returns>List of interpolation parameters in the range [0, 1].</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Flatten(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="count">Number of points in line.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="resolution">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Flatten(System.Collections.Generic.IList{System.Int32},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Flatten(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Int32,System.Int32,System.Double)">
            <summary>
            Flatten a line according to the specified resolution using the Douglas-Peucker algorithm.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="indices">The indices of the points being flattened.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.FastFlatten(System.Collections.Generic.List{System.Int32},System.Double[],System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Performance optimized flattening routine.
            </summary>
            <param name="result">A list of indices of the flattened points.</param>
            <param name="X">x coordinate of ith point.</param>
            <param name="Y">y coordinate of ith point.</param>
            <param name="b">Beginning index of the flattening operation.</param>
            <param name="e">Ending index of the flattening operation.</param>
            <param name="E">Maximum flattening error.</param>
            <returns>Indices of points forming a flattened version. The first and last points from the original line are guaranteed to
            be present.</returns>
        </member>
        <member name="M:Infragistics.Portable.Flattener.Spline(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Returns the points for a spline with the given key points.
            </summary>
            <param name="count">The number of source points.</param>
            <param name="X">Delegate to find the X-coordinate of a key point at a given index.</param>
            <param name="Y">Delegate to find the Y-coordinate of a key point at a given index.</param>
            <returns>The points for a spline with the given key points.</returns>
        </member>
        <member name="T:Infragistics.Portable.GeometryUtil">
            <summary>
            Utility class for geometry operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.SimplifyAngle(System.Double)">
            <summary>
            Simplifies an angle to a value between 0 and 360.
            </summary>
            <param name="angle">The angle to simplified.</param>
            <returns>The angle, simplified to a value between 0 and 360.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.AngleFromSlope(System.Double)">
            <summary>
            Gets the angle of a line given its slope.
            </summary>
            <param name="slope">The slope.</param>
            <returns>The angle of a line given its slope.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.Slope(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Calculates the slope of a line given two known points.
            </summary>
            <param name="point1">One point on the line.</param>
            <param name="point2">A second point on the line.</param>
            <returns>The slope of the line containing the points point1 and point2.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.Eccentricity(Infragistics.Portable.Rect)">
            <summary>
            Calculates the eccentricity of an ellipse with the given bounds.
            </summary>
            <param name="bounds">The bounding rectangle for the ellipse.</param>
            <returns>The eccentricity of an ellipse with the given bounds.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.PointOnEllipse(System.Double,System.Double,Infragistics.Portable.Point,System.Double,System.Double)">
            <summary>
            Gets a point on an ellipse at the given angle and extent.
            </summary>
            <param name="theta">The angle at which to find a point on the ellipse, expressed in radians.</param>
            <param name="eccentricity">The eccentricity of the ellipse.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="halfHeight">Half the height of the ellipse.</param>
            <param name="extent">Location of the point relative to the center and the surface of the ellipse, expressed as a value between 0 and 1, with 0 being the center and 1 being on the surface of the ellipse.</param>
            <returns>A point on the ellipse at the given angle and extent.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.FindCenter(System.Double,System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Calculates the center of the current chart.
            </summary>
            <param name="width">Width of the control.</param>
            <param name="height">Height of the control.</param>
            <param name="exploded">Whether or not the point is exploded.</param>
            <param name="angle">Angle of the slice.</param>
            <param name="radius">Radius value.</param>
            <returns>The center point of the chart.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.FindRadialPoint(Infragistics.Portable.Point,System.Double,System.Double)">
            <summary>
            Finds a point in Cartesian coordinates using radial parameters.
            </summary>
            <param name="center">The center of a circle to find a point on the border of.</param>
            <param name="angle">The angle at which to find a point.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>The point on the border of a circle with the given center and radius, at the specified angle.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.PointAtDistance(Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double)">
            <summary>
            Finds the point between two points that is at a specified distance from the first.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="distance">The distance from the first point.</param>
            <returns>The Point at the specified location.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetSegmentLength(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Gets the length of the segment specified by the two points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The length of the segment.</returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetCenterFromArcSegment(Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets center from arc segment 
            </summary>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetAngleTo(Infragistics.Portable.Point,Infragistics.Portable.Point)">
            <summary>
            Gets angle to a point from the specified center point
            </summary>
            <param name="center"></param>
            <param name="toPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.GeometryUtil.GetCircleIntersection(Infragistics.Portable.Point,Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double)">
            <summary>
            Gets points intersecting a line and a circle with a given center and radius
            </summary>
        </member>
        <member name="T:Infragistics.Portable.PathFigureUtil">
            <summary>
            Utilty methods for PathFigures.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.PathFigureUtil.Duplicate(Infragistics.Portable.Graphics.Media.PathFigureCollection)">
            <summary>
            Duplicates the specified path figure collection.
            </summary>
            <param name="pathFigureCollection">The path figure collection.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.PathFigureUtil.Duplicate(Infragistics.Portable.Graphics.Media.PathFigure)">
            <summary>
            Creates a duplicate of the current PathFigure object.
            </summary>
            <param name="pathFigure">The current PathFigure object.</param>
            <returns>A new PathFigure</returns>
        </member>
        <member name="T:Infragistics.Portable.PolygonUtil">
            <summary>
            Provides utility methods for working with polygons or list of points
            </summary>
        </member>
        <member name="M:Infragistics.Portable.PolygonUtil.PolygonContainsPoint(System.Collections.Generic.IList{Infragistics.Portable.Point},Infragistics.Portable.Point)">
            <summary>
            Checks if a polygon contains specified point
            </summary>
        </member>
        <member name="T:Infragistics.Portable.SmartPlaceableWrapper`1">
            <summary>
            ISmartPlaceable wrapper class for a FrameworkElement.
            For use with the SmartPlacer class.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.#ctor">
            <summary>
            SmartPlaceableWrapper constructor.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.NoWiggle">
            <summary>
            If true, no attempt will be made to shift the position of the smart placeable element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.Element">
            <summary>
            Gets or sets the associated FrameworkElement.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.ElementLocationResult">
            <summary>
            The resulting location for Element after smart placement.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.OriginalLocation">
            <summary>
            Gets or sets the original location for Element.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.GetSmartPositions">
            <summary>
            Gets the array of SmartPositions for this SmartPlaceableWrapper.
            </summary>
            <returns>The array of SmartPositions for this SmartPlaceableWrapper.</returns>
        </member>
        <member name="F:Infragistics.Portable.SmartPlaceableWrapper`1.smartPositionDefault">
            <summary>
            Dummy array consisting of the default SmartPositions.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPlaceableWrapper`1.smartPositions">
            <summary>
            SmartPositions in order of preference.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.GetSmartBounds(Infragistics.Portable.SmartPosition)">
            <summary>
            Gets the smart placement bounds for the SmartPlaceableWrapper using the specified SmartPosition.
            </summary>
            <param name="position">A SmartPosition value indicating how to place the SmartPlaceableWrapper.</param>
            <returns>A Rect representing the calculated bounds for the SmartPlaceableWrapper at the given SmartPosition.</returns>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.Opacity">
            <summary>
            The Opacity of the underlying element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlaceableWrapper`1.SmartPosition">
            <summary>
            The SmartPosition being used for placement of the SmartPlaceableWrapper.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlaceableWrapper`1.GetOffset(Infragistics.Portable.SmartPosition,System.Double,System.Double)">
            <summary>
            Returns the offset (from OriginalLocation) representing a particular SmartPosition.
            </summary>
            <param name="position">A SmartPosition.</param>
            <param name="w">The width of the element being positioned.</param>
            <param name="h">The height of the element being positioned.</param>
            <returns>A Point representing the offset from OriginalLocation.</returns>
        </member>
        <member name="T:Infragistics.Portable.SmartPosition">
            <summary>
            Describes available positions for smart label placement with respect to the notional rectangle's
            origin
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.LeftTop">
            <summary>
            Specifies left top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.CenterTop">
            <summary>
            Specifies center top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.RightTop">
            <summary>
            Specifies right top as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.LeftCenter">
            <summary>
            Specifies left center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.CenterCenter">
            <summary>
            Specifies center center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.RightCenter">
            <summary>
            Specifies right center as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.LeftBottom">
            <summary>
            Specifies left bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.CenterBottom">
            <summary>
            Specifies center bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.SmartPosition.RightBottom">
            <summary>
            Specifies right bottom as a valid smart placement position.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ISmartPlaceable">
            <summary>
            Interface for objects placed by a smart placer object.
            </summary>
            <remarks>
            Although there is a clear intent to SmartPosition values, implementing classes
            are free to interpret the values as they wish. The only restriction being that
            the position parameter be interpreted coherently: the bounds set by calling
            SetPosition() should be identical to those returned by calling GetPosition()
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.ISmartPlaceable.GetSmartPositions">
            <summary>
            Gets an array of valid positions for the current object. Objects can individually
            place restrictions on where they can be placed, although in reality it's more
            likely that they'll just return a static array.
            
            The order of the valid positions has some significance, in that although the
            placer will choose the best overall position, it will stop searching as
            soon as it finds an ideal one. The upshot of all of this is that you should
            return an array sorted in order of preferred placement.
            </summary>
            <returns>Array of valid smart positions for the current object.</returns>
        </member>
        <member name="M:Infragistics.Portable.ISmartPlaceable.GetSmartBounds(Infragistics.Portable.SmartPosition)">
            <summary>
            Gets the bounds of the current object if it were placed at the specified position.
            </summary>
            <param name="position">Smart position for bounds.</param>
            <returns>Bounds for the current object</returns>
        </member>
        <member name="P:Infragistics.Portable.ISmartPlaceable.SmartPosition">
            <summary>
            Gets or sets the position of the current object.
            </summary>
            <remarks>
            After the smart position is set, the current object's
            bounds are assumed to be that returned from GetSmartBounds() if called with the same position.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.ISmartPlaceable.Opacity">
            <summary>
            Sets or gets the opacity of the current object.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.SmartPlacer">
            <summary>
            Manages the position for each object in a set of managed SmartPositions in
            an attempt to minimise overlap.
            </summary>
            <remarks>
            Collision avoidance uses a greedy algorithm running in O(n^2) with O(n) storage.
            Although there are no known algorithms running in less time than this, simulated
            annealing may produce slightly better results with comparable execution time.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.SmartPlacer.#ctor">
            <summary>
            Creates a new SmartPlacer with the default configuration.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlacer.Bounds">
            <summary>
            Sets or gets the placement bounds for this smart placer. Setting the
            placement bounds has no effect on previously placed objects.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlacer.Overlap">
            <summary>
            Sets or gets the maximum permissible placed overlap expressed as a
            percentage [0, 1] of each placeable's area. Setting the
            placement overlap has no effect on previously placed objects.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.SmartPlacer.Fade">
            <summary>
            Sets or gets the fade exponent for ISmartPlaceables which exceed
            the current overlap. Setting the
            placement fade has no effect on previously placed objects.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.SmartPlacer.Place(Infragistics.Portable.ISmartPlaceable)">
            <summary>
            Place the object with respect to currently placed object.
            Calling this method causes the object to be immediately updated, but has no effect on previously
            placed objects.
            
            Placeables which cannot be placed within the placement bounds or 
            without overlapping previously placed objects are hidden
            </summary>
            <param name="smartPlaceable">Object to place.</param>
        </member>
        <member name="T:Infragistics.Portable.ComponentContainer">
            <summary>
            Represents a base class for component container
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.#ctor">
            <summary>
            Creates instance of ComponentContainer
            </summary>
        </member>
        <member name="E:Infragistics.Portable.ComponentContainer.SizeChanged">
            <summary>
            Occurs when size of the component container is changed 
            </summary>
        </member>
        <member name="E:Infragistics.Portable.ComponentContainer.Invalidated">
            <summary>
            Occurs when the component container is invalidated 
            </summary>
        </member>
        <member name="E:Infragistics.Portable.ComponentContainer.AfterInvalidated">
            <summary>
            Occurs after the component container is invalidated 
            </summary>
        </member>
        <member name="P:Infragistics.Portable.ComponentContainer.Width">
            <summary>
            Gets or sets Width of the component container
            </summary>
        </member>
        <member name="P:Infragistics.Portable.ComponentContainer.Height">
            <summary>
            Gets or sets Height of the component container
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.RaiseSizeChanged(System.Double,System.Double)">
            <summary>
            Raises the SizeChanged event
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.RaiseInvalidated(Infragistics.Portable.IRenderer)">
            <summary>
            Raises the Invalidated event
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ComponentContainer.RaiseAfterInvalidated(Infragistics.Portable.IRenderer)">
            <summary>
            Raises the Invalidated event
            </summary>
        </member>
        <member name="P:Infragistics.Portable.ComponentContainer.PixelScalingRatio">
            <summary>
            Gets or sets the scaling value used to affect the pixel density of the control.
            </summary>
            <remarks>
            A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
            to appear blurry.
            </remarks>
        </member>
        <member name="T:Infragistics.Portable.InterpolationMode">
            <summary>
            Describes available modes for color interpolation.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.InterpolationMode.RGB">
            <summary>
            Interpolation in RGB space.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.InterpolationMode.HSV">
            <summary>
            Interpolation in HSV space.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ColorUtil">
            <summary>
            Utility class for color-based operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.RandomColor(System.Byte)">
            <summary>
            Returns a random color.
            </summary>
            <param name="alpha">The alpha level of the color to generate.</param>
            <returns>A random color with the specified alpha level.</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.RandomHue(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Get a random color  
            </summary>
            <param name="color">Specifies the alpha, saturation and value for the returned color</param>
            <returns>New color</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetInterpolation(Infragistics.Portable.Graphics.Media.Color,System.Double,Infragistics.Portable.Graphics.Media.Color,Infragistics.Portable.InterpolationMode)">
            <summary>
            Get an interpolation from the current color to the specified color
            </summary>
            <param name="minimum">begin color, corresponding to p=0.0</param>
            <param name="interpolation_">interpolation parameter assumed to be in [0.0, 1.0]</param>
            <param name="maximum_">end color, corresponding to p=1.0</param>
            <param name="interpolationMode">Interpolation mode to use.</param>
            <returns>new color corresponding to the specified interpolation parameter</returns>
            <remarks>
            There are always two interpolation paths for the hue, and this function
            chooses the shortest one, so for example an interpolation from red to 
            blue runs through purple, not orange, yellow and green.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetAHSVInterpolation(System.Double[],System.Double,System.Double[])">
            <summary>
            Get an interpolated color between two colors.
            </summary>
            <param name="minimum">begin color, corresponding to p=0.0</param>
            <param name="interpolation">interpolation parameter assumed to be in [0.0, 1.0]</param>
            <param name="maximum">end color, corresponding to p=1.0</param>
            <returns>new color corresponding to the specified interpolation parameter</returns>
            <remarks>
            There are always two interpolation paths for the hue, and this function
            chooses the shortest one, so for example an interpolation from red to 
            blue runs through purple, not orange, yellow and green.
            </remarks>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetLightened(Infragistics.Portable.Graphics.Media.Color,System.Double)">
            <summary>
            Gets a new color corresponding to this color darkened or lightened by specified amount
            </summary>
            <param name="color"></param>
            <param name="interpolation">-1.0 for full darkening, to 1.0 for full lightening</param>
            <returns>new Color</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetAHSL(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Gets the ahsl components of this color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetAHSV(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Gets the ahsv components of this color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.FromAHSL(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from the specified ahsl components 
            </summary>
            <param name="alpha">The alpha (transparency), expressed as a value between 0 and 1, where 0 is transparent and 1 is opaque.</param>
            <param name="hue">The hue (color), expressed as a value between 0 and 1, where 0 is red, 1 is also red, and in between are orange, yellow, green, blue, indigo, and violet.</param>
            <param name="saturation">The saturation (colorfulness), expressed as a value between 0 and 1, where 0 is gray and 1 is fully saturated/colorful.</param>
            <param name="lightness">The lightness, expressed as a value between 0 and 1, where 0 is black and 1 is white.</param>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.FromAHSV(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets a color from the specified ahsv components
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.GetRandomColor(System.Int32)">
            <summary>
            Get a random color from generated array of colors.
            </summary>
            <param name="index">The index of the color to get in the generated array.</param>
            <returns>The color in the RandomColors array at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Portable.ColorUtil.ColorToInt(Infragistics.Portable.Graphics.Media.Color)">
            <summary>
            Converts a color to its integer representation for use in bitmaps.
            </summary>
            <param name="color">The color to convert to an integer.</param>
            <returns>The integer representation for the given color.</returns>
        </member>
        <member name="T:Infragistics.Portable.DoubleValueChangedEventHandler">
            <summary>
            Represents the method that will handle double value change events. 
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Portable.ErrorBarCalculatorReference">
            <summary>
            Describes available behaviors for choosing the direction of error bars calculation in scatter series.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorReference.X">
            <summary>
            Variable X.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorReference.Y">
            <summary>
            Variable Y.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.ErrorBarCalculatorType">
            <summary>
            Describes available types of error bar calculators.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.Fixed">
            <summary>
            A calculator type that provides a fixed value.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.Percentage">
            <summary>
            A calculator type that provides a fixed percentage of each input value
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.Data">
            <summary>
            A calculator type that provides the input values directly.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.StandardDeviation">
            <summary>
            A calculator type that provides the standard deviation of the input values.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.ErrorBarCalculatorType.StandardError">
            <summary>
            A calculator type that provides the standard error of the input values.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.IErrorBarCalculator">
            <summary>
            The error bar calculator interface
            </summary>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetCalculatorType">
            <summary>
            Gets the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetIndependentValue">
            <summary>
            Gets the independent value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetDependentValue(System.Double)">
            <summary>
            Gets the dependent value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetItemColumn">
            <summary>
            Gets the fast item column associated with this calculator.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Infragistics.Portable.IErrorBarCalculator.Changed">
            <summary>
            Event raised when a property of the calculator has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.HasConstantPosition">
            <summary>
            Determines whether the position is constant.
            </summary>
            <returns>
            	<c>true</c> if position is constant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Portable.IErrorBarCalculator.GetPosition">
            <summary>
            Gets the position.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Portable.RectChangedEventHandler">
            <summary>
            Represents the method that will handle rectangle changed events. 
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Portable.ScreenRectChangedEventHandler">
            <summary>
            Represents the method that will handle rectangle changed events. 
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Portable.ArrayUtil">
            <summary>
            Utility class for array operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the contents of the current IList object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.InsertionIndex``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the insertion index for an element in a sorted list.
            </summary>
            <remarks>
            The list must be sorted in ascending order prior to calling this method. 
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="value"></param>
            <returns>Insertion index for the specified value.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.InsertionIndex``1(System.Collections.Generic.IList{``0},System.Comparison{``0},``0)">
            <summary>
            Returns the insertion index for an element in a sorted list.
            </summary>
            <remarks>
            The list must be sorted according to the specified comparison
            prior to calling this method. 
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="comparison"></param>
            <param name="value"></param>
            <returns>Insertion index for the specified value.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.BinarySearch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>
            Conducts a binary search for a value in the list using a given comparison function.
            </summary>
            <typeparam name="T">The Type of items in the list.</typeparam>
            <param name="list">The list of items to search.</param>
            <param name="comparisonFunction">A comparison function used for finding the target item in the list.</param>
            <returns>The index of the found item in the list.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.BinarySearch``1(Infragistics.Portable.IIndexedPool{``0},System.Func{``0,System.Int32})">
            <summary>
            Conducts a binary search for a value in the indexed pool using a given comparison function.
            </summary>
            <typeparam name="T">The Type of items in the pool.</typeparam>
            <param name="list">The pool of items to search.</param>
            <param name="comparisonFunction">A comparison function used for finding the target item in the pool.</param>
            <returns>The index of the found item in the pool.</returns>
        </member>
        <member name="M:Infragistics.Portable.ArrayUtil.ElementAtMod``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Gets an element at modulus index of list or null if the list is null or empty   
            </summary>  
        </member>
        <member name="T:Infragistics.Portable.CoreGeometryUtil">
            <summary>
            Utility class for geometry operations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.CoreGeometryUtil.SimplifyAngle(System.Double)">
            <summary>
            Simplifies an angle to a value between 0 and 360.
            </summary>
            <param name="angle">The angle to simplified.</param>
            <returns>The angle, simplified to a value between 0 and 360.</returns>
        </member>
        <member name="M:Infragistics.Portable.CoreGeometryUtil.GetCenterFromArcSegment(Infragistics.Portable.Point,Infragistics.Portable.Point,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets center from arc segment 
            </summary>
        </member>
        <member name="T:Infragistics.Portable.Extensions">
            <summary>
            Class containing extension methods used by Infragistics Data Visualization.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Extensions.Reset(Infragistics.Portable.Graphics.Media.PathGeometry)">
            <summary>
            Resets the given PathGeometry.
            </summary>
            <param name="geom">The PathGeometry to reset.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.Reset(Infragistics.Portable.Graphics.Media.GeometryGroup)">
            <summary>
            Resets the given GeometryGroup.
            </summary>
            <param name="geom">The GeometryGroup to reset.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.Detach(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Detaches the given FrameworkElement from the visual tree.
            </summary>
            <param name="child">The FrameworkElement to detach from the visual tree.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.TransferChildrenTo(Infragistics.Portable.Components.UI.Controls.Panel,Infragistics.Portable.Components.UI.Controls.Panel)">
            <summary>
            Transfers all of a Panel's Children to another Panel.
            </summary>
            <param name="from">The Panel to transfer Children from.</param>
            <param name="to">The Panel to transfer Children to.</param>
        </member>
        <member name="M:Infragistics.Portable.Extensions.IsPlottable(Infragistics.Portable.Point)">
            <summary>
            Determines if a Point is within the range of plottable points.
            </summary>
            <param name="point">The Point under observation.</param>
            <returns>True if the given point is plottable, otherwise False.</returns>
        </member>
        <member name="M:Infragistics.Portable.Extensions.IsPlottable(Infragistics.Portable.Rect)">
            <summary>
            Determines if a Rect is within plottable range.
            </summary>
            <param name="rect">The Rect under observation.</param>
            <returns>True if the Rect is plottable, otherwise False.</returns>
        </member>
        <member name="T:Infragistics.Portable.Pool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">Pooled object type. Must be nullable</typeparam>
        </member>
        <member name="M:Infragistics.Portable.Pool`1.#ctor">
            <summary>
            Constructs a new Pool instance.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Item(System.Int32)">
            <summary>
            Gets the indexed item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="index"></param>
            <returns>Item</returns>
        </member>
        <member name="M:Infragistics.Portable.Pool`1.Clear">
            <summary>
            Clears the items from the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Count">
            <summary>
            Gets or sets the count of the items that are in the pool.
            </summary>
            <remarks>
            Setting the count to less than the current value will result in pool
            items automatically being deactivated.
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Active">
            <summary>
            The list of active objects.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.Pool`1.Inactive">
            <summary>
            The list of inactive objects.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.Pool`1.DoToAll(System.Action{`0})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="T:Infragistics.Portable.IPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.IPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.IPool`1.Clear">
            <summary>
            Clear the values from the pool.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.IIndexedPool`1">
            <summary>
            An IPool that is indexed by integer indexes.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="P:Infragistics.Portable.IIndexedPool`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="T:Infragistics.Portable.IHashPool`2">
            <summary>
            An hash mapped IPool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="P:Infragistics.Portable.IHashPool`2.Item(`0)">
            <summary>
            Gets the item for the specified key.
            </summary>
            <param name="key">The key for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="T:Infragistics.Portable.HashPool`2">
            <summary>
            An implementation of a hash mapped pool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Inactive">
            <summary>
            The inactive members of the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Active">
            <summary>
            The active members of the pool.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.#ctor">
            <summary>
            Constructs a new HashPool instance.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.Item(`0)">
            <summary>
            Gets the requested item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="key"></param>
            <returns>Item</returns>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.ActiveKeys">
            <summary>
            Gets the keys of the active pool objects.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.IsActiveKey(`0)">
            <summary>
            Returns whether the provided key is in the active set.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key is in the active set.</returns>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.Remove(`0)">
            <summary>
            Removes the item with the provided key from the pool.
            </summary>
            <param name="key">The key for the item to remove.</param>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.Clear">
            <summary>
            Clears the items from the hash pool.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.HashPool`2.ActiveCount">
            <summary>
            Gets the count of the number of actives.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.HashPool`2.DoToAll(System.Action{`1})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="T:Infragistics.Portable.RectUtil">
            <summary>
            Utility class for rectangle-based calculations.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetCenter(Infragistics.Portable.Rect)">
            <summary>
            Gets the center of the current rectangle
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns>Center point</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetArea(Infragistics.Portable.Rect)">
            <summary>
            Calculates the area of the current rectangle.
            </summary>
            <param name="rect">The current rectangle.</param>
            <returns>The area of the current rectangle.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Duplicate(Infragistics.Portable.Rect)">
            <summary>
            Create a clone of the current rectangle
            </summary>
            <param name="rect"></param>
            <returns>A clone of the current rectangle</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetLeader(Infragistics.Portable.Rect,Infragistics.Portable.Point)">
            <summary>
            Gets the attachment point on the current rectangle for the leader line
            to the specified anchor.
            </summary>
            <remarks>
            If the anchor lies within the current rectangle, the anchor is returned.  
            </remarks>
            <param name="rect">Area to join to the anchor</param>
            <param name="anchor">Anchor to join to the rectangle</param>
            <returns>Attachment point.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetDistanceSquared(Infragistics.Portable.Rect,Infragistics.Portable.Point)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified point. 
            </summary>
            <remarks>
            If the point lies within the current rectangle, the separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="pt">Point to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetDistanceSquared(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified rectangle. 
            </summary>
            <remarks>
            If the rectangles intersect, their separation is considered
            to be zero.
            </remarks>
            <param name="rect">Current rectangle.</param>
            <param name="rc">Rectangle to test.</param>
            <returns>The square of the separation.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetDistanceSquared(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Calculates the square of the distance from the current rectangle
            to the specified point. 
            </summary>
            <param name="rc">Current rectangle.</param>
            <param name="X">Point X coordinate.</param>
            <param name="Y">Point Y coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Contains(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Indicates whether the current rectangle wholly contains the specified rectangle.
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">Rectangle to test for strict inclusion</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.IntersectsWith(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle. 
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>true if the specified rectangle intersects with the current rectangle; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.IntersectionArea(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Calculates the area of intersection between the specified rectangle and the current rectangle
            </summary>
            <param name="rect">The current rectangle</param>
            <param name="rc">The rectangle to check</param>
            <returns>The area of intersection or 0.0 if the rectangles do not intersect.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetInflated(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Expands or shrinks the current rectangle by using the specified width and height
            amounts, in all directions. The
            size and position of the current rectangle are not changed.
            </summary>
            <remarks>
            The Width of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle. Likewise, the Height of the resulting rectangle is increased or
            decreased by twice the specified height.
            <para>
            If the specified width or height shrink the rectangle by more than its current
            Width or Height—giving the rectangle a negative area—the rectangle becomes the
            Empty rectangle.
            </para>
            </remarks>
            <param name="rect"></param>
            <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
            <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
            <returns>Inflated rectangle.</returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.InflateBy(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Inflate(Infragistics.Portable.Rect,System.Double,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Inflate(Infragistics.Portable.Rect,System.Double)">
            <summary>
            Inflates the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <param name="thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Round(Infragistics.Portable.Rect)">
            <summary>
            Rounds the current rectangle
            </summary>
            <param name="rect">The rect.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.IsNull(Infragistics.Portable.Rect)">
            <summary>
            Determines whether the current rectangle is null.
            </summary>
            <param name="rect">The rect.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Infragistics.Portable.Rect"/> is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Size(Infragistics.Portable.Rect)">
            <summary>
            Returns size dimensions of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Normalize(Infragistics.Portable.Rect,Infragistics.Portable.Rect)">
            <summary>
            Normalize current rectangle to dimensions of other rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.Normalize(Infragistics.Portable.Rect,Infragistics.Portable.Size)">
            <summary>
            Normalize current rectangle to dimensions of size object
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetTopLeft(Infragistics.Portable.Rect)">
            <summary>
            Returns Top Left point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetTopRight(Infragistics.Portable.Rect)">
            <summary>
            Returns Top Right point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetBottomLeft(Infragistics.Portable.Rect)">
            <summary>
            Returns Bottom Left point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetBottomRight(Infragistics.Portable.Rect)">
            <summary>
            Returns Bottom Right point of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.GetCorners(Infragistics.Portable.Rect)">
            <summary>
            Returns corner points of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.RotateAboutCenter(Infragistics.Portable.Rect,System.Double)">
            <summary>
            Returns bounds of rotated rectangle around center of the current rectangle
            </summary>
        </member>
        <member name="M:Infragistics.Portable.RectUtil.RotateAboutPoint(Infragistics.Portable.Rect,System.Double,System.Double,System.Double)">
            <summary>
            Returns bounds of rotated rectangle around specified point
            </summary>
        </member>
        <member name="T:Infragistics.Portable.StackPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Portable.StackPool`1.Pop">
            <summary>
            Gets an object from the pool.
            </summary>
            <remarks>
            The pool will either Create a new object or Activate one which was previously returned
            and Disactivated. If DeferDisactivate is set there may be pending active objects
            available which will be reused directly).
            </remarks>
            <returns>An object.</returns>
        </member>
        <member name="M:Infragistics.Portable.StackPool`1.Push(`0)">
            <summary>
            Returns an object to the pool for recycling.
            </summary>
            <remarks>
            All references to objects which have been returned to the pool should be destroyed. 
            <para>
            When an object is returned to the pool it will be immediately Disactivated (unless
            DeferDisactivate is set) and may also be Destroyed either immediately or some time
            later. 
            </para>
            </remarks>
            <param name="t"></param>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.DeferDisactivate">
            <summary>
            Sets or gets the DeferDisactivate flag.
            </summary>
            <remarks>
            When the pool is marked to defer disactivation, objects returned to the pool are
            not immediately disactivated, instead remaining in a limbo state where they are
            available for reuse without Activation. Resetting DeferDisactivate causes all of 
            these limbo objects to be disactivated and potentially destroyed.
            <para>
            Deferred disactivation is useful where the activation/disactivation cycle is costle
            (such as add/remove a VisualElement from a ParentItem Panel).
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.ActiveCount">
            <summary>
            Gets the number of active items in the current StackPool object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.InactiveCount">
            <summary>
            Gets the number of inactive (not including limbo) items in the
            current StackPool object.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Deactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.StackPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.StackPool`1.active">
            <summary>
            The active object collection.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.StackPool`1.limbo">
            <summary>
            The limbo object collection.
            </summary>
        </member>
        <member name="F:Infragistics.Portable.StackPool`1.inactive">
            <summary>
            The inactive object collection.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.IVisualData">
            <summary>
            Interface implemented by classes that expose visual information
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.IVisualData.Serialize">
            <summary>
            Serializes the visual data to string format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PrimitiveVisualDataList">
            <summary>
            Provides information about primitive visual elements.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualDataList.ContainingTag(System.String)">
            <summary>
            Returns the items matching the categorical tag.
            </summary>
            <param name="tag">The tag to match.</param>
            <returns>The returned visual data.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualDataList.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LabelAppearanceData">
            <summary>
            Describes appearance information about a label.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Text">
            <summary>
            Text of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.HorizontalAlignment">
            <summary>
            Horizontal Alignment of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.VerticalAlignment">
            <summary>
            Vertical Alignment of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.TextAlignment">
            <summary>
            Alignment of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.TextWrapping">
            <summary>
            Wrapping of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.TextPosition">
            <summary>
            Position of the Label's Text
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.LabelBrush">
            <summary>
            Label brush.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.LabelBrushExtended">
            <summary>
            Label brush.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Angle">
            <summary>
            Angle of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Opacity">
            <summary>
            Opacity of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Visibility">
            <summary>
            Visibility of the Label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.Font">
            <summary>
            Font of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontFamily">
            <summary>
            Font family of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontSize">
            <summary>
            Font Size  of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontWeight">
            <summary>
            Font Weight of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontStyle">
            <summary>
            Font Style of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.FontStretch">
            <summary>
            Font Stretch of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginLeft">
            <summary>
            Gets or sets left Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginRight">
            <summary>
            Gets or sets right Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginTop">
            <summary>
            Gets or sets top Margin of the label
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LabelAppearanceData.MarginBottom">
            <summary>
            Gets or sets bottom Margin of the label
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LabelAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LabelAppearanceData.ScaleFromDevicePixels(Infragistics.Portable.VisualData.VisualDataPixelScalingOptions)">
            <summary>
            Scales back from device specific pixels.
            </summary>
            <param name="options">The pixel scaling options.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.VisualDataPixelScalingOptions">
            <summary>
            Optiosn for how the pixel scaling should be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LabelAppearanceDataList">
            <summary>
            Describes appearance information about a list of labels.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LabelAppearanceDataList.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.BrushAppearanceData">
            <summary>
            Describes appearance information about Brush data
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.BrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BrushAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.ColorData">
            <summary>
            Describes appearance information about a color
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.A">
            <summary>
            Alpha
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.R">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.G">
            <summary>
            Green
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ColorData.B">
            <summary>
            Blue
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ColorData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.RectData">
            <summary>
            Describes appearance information about a rect
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectData.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a RectData.
            </summary>
            <param name="left">The left value.</param>
            <param name="top">The top value.</param>
            <param name="width">The width value.</param>
            <param name="height">The height value.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Width">
            <summary>
            Width.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Height">
            <summary>
            Height.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.IsEmpty">
            <summary>
            Gets whether the rect is empty.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectData.Empty">
            <summary>
            Gets an empty rect.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PointData">
            <summary>
            Describes appearance information about a rect
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PointData.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a point data.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PointData.X">
            <summary>
            Gets or sets the x value.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PointData.Y">
            <summary>
            Gets or sets the y value.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PointData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PointData.Equals(System.Object)">
            <summary>
            Gets if this point is equal to another.
            </summary>
            <param name="obj">Other point.</param>
            <returns>True if they are equal.</returns>
        </member>
        <member name="T:Infragistics.Portable.VisualData.SizeData">
            <summarHeight>
            Describes appearance information about a rect
            </summarHeight>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SizeData.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a SizeData
            </summary>
            <param name="width">The width to use.</param>
            <param name="height">The height to use.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SizeData.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SizeData.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SizeData.Serialize">
            <summarHeight>
            Serializes the current object to a string
            </summarHeight>
        </member>
        <member name="T:Infragistics.Portable.VisualData.SolidBrushAppearanceData">
            <summary>
            Describes appearance information about Solid Brush data
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SolidBrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SolidBrushAppearanceData.ColorValue">
            <summary> Gets or sets the Color of Brush data </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SolidBrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData">
            <summary>
            Describes appearance information about Linear Gradient Brush data
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.#ctor">
            <summary>
            Creates an instance of Brush data
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.Type">
            <summary> Gets or sets the Type of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.StartX">
            <summary> Gets or sets the StartX of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.StartY">
            <summary> Gets or sets the StartY of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.EndX">
            <summary> Gets or sets the EndX of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.EndY">
            <summary> Gets or sets the EndY of Brush data </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.Stops">
            <summary>
            Gets or sets the Gradient Stops
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LinearGradientBrushAppearanceData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.GradientStopAppearanceData">
            <summary>
            Describes appearance information about Gradient Stop.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GradientStopAppearanceData.ColorValue">
            <summary>
            The color of the Gradient Stop
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GradientStopAppearanceData.Offset">
            <summary>
            The Offset of the Gradient Stop
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GradientStopAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PrimitiveAppearanceData">
            <summary>
            Describes appearance information about a primitive element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Stroke">
            <summary>
            The stroke color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.StrokeExtended">
            <summary>
            The stroke color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Fill">
            <summary>
            The fill color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.FillExtended">
            <summary>
            The fill color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.StrokeThickness">
            <summary>
            The thickness of the stroke of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.IsVisible">
            <summary>
            Whether the primitive is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Opacity">
            <summary>
            The opacity of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.CanvasLeft">
            <summary>
            The left position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.CanvasTop">
            <summary>
            The top position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.CanvaZIndex">
            <summary>
            The z index of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.DashArray">
            <summary>
            Stroke dash array of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveAppearanceData.DashCap">
            <summary>
            The value of the line dash cap.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveAppearanceData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveAppearanceData.ScaleFromDevicePixels(Infragistics.Portable.VisualData.VisualDataPixelScalingOptions)">
            <summary>
            Scales back from device pixels.
            </summary>
            <param name="options">The options to use.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.GetPointsSettings">
            <summary>
            Describes how point saliency is determined.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GetPointsSettings.IgnoreFigureStartPoint">
            <summary>
            Describes whether the start element of shapes should be ignored due to duplicate points.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PrimitiveVisualData">
            <summary>
            Describes information about a primitive visual element.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.#ctor">
            <summary>
            Constructs a PrimitiveVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.#ctor(System.String)">
            <summary>
            Constructs a primitive visual element.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Appearance">
            <summary>
            The visual appearance of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Tags">
            <summary>
            Information tags that categorize the intent of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Type">
            <summary>
            The type of the visual element.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PrimitiveVisualData.Name">
            <summary>
            The name of the visual element.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.GetPoints(Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Gets the salient points associated with this visual element.
            </summary>
            <param name="settings">Describes how point saliency should be determined.</param>
            <returns>Groupings of points associated with the element.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PrimitiveVisualData.ScaleFromDevicePixels(Infragistics.Portable.VisualData.VisualDataPixelScalingOptions)">
            <summary>
            Scales back from device pixels.
            </summary>
            <param name="options">The options to use.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.RectangleVisualData">
            <summary>
            Describes visual information for a rectangle visual.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.#ctor">
            <summary>
            Constructs a RectangleVisualData.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.RadiusX">
            <summary>
            X-radius of the ellipse used to round corners.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.RadiusY">
            <summary>
            Y-radius of the ellipse used to round corners.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Rectangle)">
            <summary>
            Constructs a RectangleVisualData based on a source Rectangle.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="rect">The source Rectangle.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.ShapeTags">
            <summary>
            Represents categorical information to provide context for a visual element.
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LineVisualData">
            <summary>
            Describes visual information for a line visual.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.#ctor">
            <summary>
            Constructs a LineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Line)">
            <summary>
            Constructs a LineVisualData based on a source Line.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Line.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.X1">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.Y1">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineVisualData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolyLineVisualData">
            <summary>
            Describes visual information for a polyline visual.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyLineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.#ctor">
            <summary>
            Constructs a PolyLineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Polyline)">
            <summary>
            Constructs a PolyLineVisualData based on a source Polyline.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Polyline.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyLineVisualData.Points">
            <summary>
            The points in the polyline.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyLineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolygonVisualData">
            <summary>
            Describes visual information for a polygon visual.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolygonVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.#ctor">
            <summary>
            Constructs a PolygonVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Polygon)">
            <summary>
            Constructs a PolygonVisualData based on a source Polygon.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="polygon"></param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolygonVisualData.Points">
            <summary>
            The points in the polygon.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolygonVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PathVisualData">
            <summary>
            Describes visual information for a path visual.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.#ctor">
            <summary>
            Constructs a PathVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Path)">
            <summary>
            Constructs a PathVisualData based on a source Path.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="path">The source Path.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.#ctor(System.String,Infragistics.Portable.Graphics.Shapes.Line)">
            <summary>
            Constructs a PathVisualData based on a source Line.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Line.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathVisualData.Data">
            <summary>
            The data in the path.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.GeometryData">
            <summary>
            Describes visual information for a geometry visual.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.GeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.GeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PathGeometryData">
            <summary>
            Describes visual information for a path geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.#ctor">
            <summary>
            Constructs a PathGeometryData.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathGeometryData.Figures">
            <summary>
            The figures in the path.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LineGeometryData">
            <summary>
            Describes visual information for a line geometry.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.X1">
            <summary>
            The x position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.Y1">
            <summary>
            The y position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineGeometryData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.RectangleGeometryData">
            <summary>
            Describes visual information for a rectangle geometry.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.X">
            <summary>
            The x position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Y">
            <summary>
            The y position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.RectangleGeometryData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.RectangleGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.EllipseGeometryData">
            <summary>
            Describes visual information for an ellipse geometry.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.CenterX">
             <summary>
             The x coordinate of the center of the ellipse.
             </summary>
            
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.CenterY">
            <summary>
            The y coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.RadiusX">
            <summary>
            The x radius of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.EllipseGeometryData.RadiusY">
            <summary>
            The y radius of the ellipse.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.EllipseGeometryData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.EllipseGeometryData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.EllipseGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PathFigureData">
            <summary>
            Describes visual information for a path figure.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.#ctor">
            <summary>
            Constructs a PathFigureData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.#ctor(Infragistics.Portable.Graphics.Media.PathFigure)">
            <summary>
            Constructs a PathFigureData based on a source PathFigure.
            </summary>
            <param name="fig">The source PathFigure.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathFigureData.StartPoint">
            <summary>
            The start point of the path.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PathFigureData.Segments">
            <summary>
            The segments in the path.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.Serialize">
            <summary>
            Serialize this object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PathFigureData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData}},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.SegmentData">
            <summary>
            Describes visual information for a segment.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.SegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.Serialize">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.SegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="T:Infragistics.Portable.VisualData.LineSegmentData">
            <summary>
            Describes visual information for a line segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.#ctor">
            <summary>
            Constructs a LineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.#ctor(Infragistics.Portable.Graphics.Media.LineSegment)">
            <summary>
            Constructs a LineSegmentData based on a source LineSegment.
            </summary>
            <param name="seg">The source LineSegment.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.LineSegmentData.Point">
            <summary>
            The end point of the line segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.LineSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolylineSegmentData">
            <summary>
            Describes visual information for a polyline segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.#ctor(Infragistics.Portable.Graphics.Media.PolyLineSegment)">
            <summary>
            Constructs a PolylineSegmentData based on a source PolyLineSegment.
            </summary>
            <param name="poly">The source PolylineSegment.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolylineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolylineSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolylineSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.BezierSegmentData">
            <summary>
            Information data about a bezier  segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.#ctor(Infragistics.Portable.Graphics.Media.BezierSegment)">
            <summary>
            Constructs a BezierSegmentData based on a source BezierSegment.
            </summary>
            <param name="segment">The source BezierSegment.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.BezierSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.BezierSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.BezierSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.PolyBezierSegmentData">
            <summary>
            Information data about a bezier spline segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.#ctor(Infragistics.Portable.Graphics.Media.PolyBezierSegment)">
            <summary>
            Constructs a PolylineSegmentData based on a source PolyLineSegment.
            </summary>
            <param name="poly">The source PolylineSegment.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyBezierSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.PolyBezierSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.SerializeOverride">
            <summary>
            Serializes the current object to a string
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.PolyBezierSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.ArcSegmentData">
            <summary>
            Information data about an arc segment.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.#ctor">
            <summary>
            Constructs an ArcSegmentData
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.#ctor(Infragistics.Portable.Graphics.Media.ArcSegment)">
            <summary>
            Constructs an ArcSegmentData based on a source arc.
            </summary>
            <param name="arc">The arc to extract data from.</param>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.Type">
            <summary>
            The type of this data.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.Point">
            <summary>
            The center point of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.IsLargeArc">
            <summary>
            Whether the arc is a large arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.IsCounterClockwise">
            <summary>
            The sweep direction of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.SizeX">
            <summary>
            The x size os the arg.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.SizeY">
            <summary>
            The y size of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Portable.VisualData.ArcSegmentData.RotationAngle">
            <summary>
            The rotation angle of the arc.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.SerializeOverride">
            <summary>
            Overrides serialization of this object
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.ScaleByViewport(Infragistics.Portable.VisualData.RectData)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.ArcSegmentData.GetPointsOverride(System.Collections.Generic.List{Infragistics.Portable.VisualData.PointData},Infragistics.Portable.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="T:Infragistics.Portable.VisualData.AppearanceHelper">
            <summary>
            Assists in storing information about chart visual appearance.
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromBrush(Infragistics.Portable.Graphics.Media.Brush)">
            <summary>
            Returns the color from a brush.
            </summary>
            <param name="b">The brush to extract the color from.</param>
            <returns>The returned color.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromBrushExtended(Infragistics.Portable.Graphics.Media.Brush)">
            <summary>
            Gets brush appearance data from brush object
            </summary>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetCanvasLeft(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Gets the left position of an element.
            </summary>
            <param name="visual">The element to get the left position of.</param>
            <returns>The left position.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetCanvasTop(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Gets the top position of an element.
            </summary>
            <param name="visual">The element to get the top position of.</param>
            <returns>The top position.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetCanvasZIndex(Infragistics.Portable.Components.UI.FrameworkElement)">
            <summary>
            Gets the z-index of an element.
            </summary>
            <param name="line">The element to get the z index of</param>
            <returns>The z index of the element.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromPathData(Infragistics.Portable.Graphics.Shapes.Path)">
            <summary>
            Gets the geometry data for a path.
            </summary>
            <param name="path">The path to get data for.</param>
            <returns>The geometry data for a path.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromLineData(Infragistics.Portable.Graphics.Shapes.Line)">
            <summary>
            Gets the geometry data for a line.
            </summary>
            <param name="line">The line to get data for.</param>
            <returns>The geometry data for a line.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromGeometry(Infragistics.Portable.Graphics.Media.Geometry)">
            <summary>
            Gets data about the provided geometry.
            </summary>
            <param name="data">The geometry to get data for.</param>
            <returns>The list of geometry data extracted.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.GetShapeAppearance(Infragistics.Portable.VisualData.PrimitiveAppearanceData,Infragistics.Portable.Graphics.Shapes.Shape)">
            <summary>
            Gets appearance information for a shape.
            </summary>
            <param name="appearance">The appearance information to populate.</param>
            <param name="path">The shape from which to get information.</param>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.FromTextElement(Infragistics.Portable.Components.UI.FrameworkElement,Infragistics.Portable.FontInfo)">
            <summary>
            Gets appearance information from a text element.
            </summary>
            <param name="frameworkElement">The text element to examine.</param>
            <param name="fontInfo">The font info to examine</param>
            <returns>The label appearance information obtained.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.SerializeItems(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{Infragistics.Portable.VisualData.IVisualData},System.Boolean)">
            <summary>
            Serializes the items into the specified string builder.
            </summary>
            <param name="sb">The string builder into which the item information should be added</param>
            <param name="name">The name of the property that returns the items</param>
            <param name="items">The collection of items to be serialized</param>
            <param name="isFirst">First if a leading comma isn't needed</param>
            <returns>Returns true if the items were added to the string building; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Portable.VisualData.AppearanceHelper.SerializeItem(System.Text.StringBuilder,System.String,Infragistics.Portable.VisualData.IVisualData,System.Boolean)">
            <summary>
            Serializes the item into the specified string builder.
            </summary>
            <param name="sb">The string builder into which the item information should be added</param>
            <param name="name">The name of the property that returns the items</param>
            <param name="item">The item to be serialized</param>
            <param name="isFirst">First if a leading comma isn't needed</param>
            <returns>Returns true if the item was added to the string building; otherwise false is returned.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter">
            <summary>
            Analyzes a data source and indicates which types of data visualizations might be a good fit for the data.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.#ctor">
            <summary>
            Constructs a DataSeriesAdapter.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.PropertyChanged">
            <summary>
            Indicates that a property has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.ItemsSource">
            <summary>
            Gets or sets the backing data for the data adapter.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.SupportedSeriesTypes">
            <summary>
            Gets or sets whether the adapter should remove duplicate data series bound to the same member paths.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.IncludedProperties">
            <summary>
            Gets or sets a set of property paths that should be included for consideration by the adapter, leaving the remaineder excluded. If null, all properties will be considered.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.ExcludedProperties">
            <summary>
            Gets or sets a set of property paths that should be exluced from consideration by the adapter.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.Refresh">
            <summary>
            Causes the DataSeriesAdapter to refresh its analysis.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.RemovingUnsupported">
            <summary>
            Called when the adapter is removing unsupported series from consideration.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.RemovingDuplicates">
            <summary>
            Called when the adapter is removing duplicate series from consideration.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.NotifyClearItems(System.Object)">
            <summary>
            Used to manually notify the adapter that the data source has reset/cleared its items. Only necessary if that datasource is not observable.
            </summary>
            <param name="dataSource">The data source cleared/reset.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.NotifyInsertItem(System.Object,System.Int32,System.Object)">
            <summary>
            Used to manually notify the adapter that the data source has had an item inserted. Only necessary if that datasource is not observable.
            </summary>
            <param name="dataSource">The data source changed.</param>
            <param name="index">The index of the new item</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.NotifyRemoveItem(System.Object,System.Int32,System.Object)">
            <summary>
            Used to manually notify the adapter that the data source has had an item removed. Only necessary if that datasource is not observable.
            </summary>
            <param name="dataSource">The data source changed.</param>
            <param name="index">The index of the old item.</param>
            <param name="oldItem">The old item.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapter.NotifySetItem(System.Object,System.Int32,System.Object,System.Object)">
            <summary>
            Used to manually notify the adapter that the data source has had an item set. Only necessary if that datasource is not observable.
            </summary>
            <param name="dataSource">The data source changed.</param>
            <param name="index">The index of the change</param>
            <param name="oldItem">The old item.</param>
            <param name="newItem">The new item.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRemovingDuplicatesEventArgs">
            <summary>
            Represents information about the duplicate series in the adapter.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRemovingDuplicatesEventArgs.RunContext">
            <summary>
            Gets information about the current analysis run.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRemovingDuplicatesEventArgs.DataSourcePath">
            <summary>
            Gets the current path within the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRemovingDuplicatesEventArgs.DuplicatePath">
            <summary>
            Gets the path that is duplicated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRemovingDuplicatesEventArgs.MatchingSeries">
            <summary>
            Gets all the series that match the duplicated path.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRemovingDuplicatesEventArgs.Handled">
            <summary>
            Sets or gets whether the handling of this duplicate should be considered complete.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRunEventArgs">
            <summary>
            Presents information about the analysis run in progress.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRunEventArgs.RunContext">
            <summary>
            Gets information about the analysis in progress.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRunEventArgs.Handled">
            <summary>
            Sets or gets whether the current action should be considered handled and the default behavior prevented.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesCollection">
            <summary>
            A collection of DataSeries.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRunEventHandler">
            <summary>
            Called for actions related to running the data series adapter's analysis.
            </summary>
            <param name="sender">The adapter.</param>
            <param name="args">The analysis arguments.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRemovingDuplicatesEventHandler">
            <summary>
            Called when removing duplicate series from the data series adapter.
            </summary>
            <param name="sender">The adapter.</param>
            <param name="args">Information about the duplicate series.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataAdapters.Implementation.DataSeriesAdapterRuleCollection">
            <summary>
            A collection of DataSeriesAdaperRules.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Implementation.DataContext">
            <summary>
            Represents the data currently in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.Series">
            <summary>
            Gets the series that is in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.Item">
            <summary>
            Gets the item that is in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.ActualItemBrush">
            <summary>
            Gets the actual resolved brush in use for the item that is in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.Outline">
            <summary>
            Gets the outline in use for the item in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.ItemLabel">
            <summary>
            Gets the label in use for the item in context, if available.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.ItemBrush">
            <summary>
            Gets the potential brush in usage for the item in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.Thickness">
            <summary>
            Gets the thickness of the item in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.DataContext.LegendLabel">
            <summary>
            Gets the legend label to use for the item in context, if available.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.Implementation.DataContext.PropertyChanged">
            <summary>
            Indicates that a property has changed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Implementation.PropertyUpdatedEventArgs">
            <summary>
            EventArgs class for property updated events.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.PropertyUpdatedEventArgs.PropertyName">
            <summary>
            Name of the property being updated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.PropertyUpdatedEventArgs.OldValue">
            <summary>
            Old or previous value of the property being updated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Implementation.PropertyUpdatedEventArgs.NewValue">
            <summary>
            New or current value of the property being updated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Implementation.TrendCalculators">
            <summary>
            Utility class for calculating trend line values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Implementation.TrendCalculators.WMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the weighted moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The weighted moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Implementation.TrendCalculators.EMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the exponential moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The exponential moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Implementation.TrendCalculators.MMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the modified moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The modified moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Implementation.TrendCalculators.CMA(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the cumulative moving average.
            </summary>
            <param name="sequence">Sequence to average.</param>
            <returns>The cumulative moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Implementation.TrendCalculators.SMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the simple moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The simple moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Implementation.TrendCalculators.MovingSum(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates a moving sum over a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the moving sum.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The moving sum values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Implementation.TrendCalculators.STDEV(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the standard deviation of a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the standard deviation values.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The sequence of calculated standard deviation values.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.Implementation.TrendLineType">
            <summary>
            Describes available types of trend lines supported by series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.None">
            <summary>
            No trend line will be displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.LinearFit">
            <summary>
            Linear fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.QuadraticFit">
            <summary>
            Quadratic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.CubicFit">
            <summary>
            Cubic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.QuarticFit">
            <summary>
            Quartic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.QuinticFit">
            <summary>
            Quintic polynomial fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.LogarithmicFit">
            <summary>
            Logarithmic fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.ExponentialFit">
            <summary>
            Exponential fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.PowerLawFit">
            <summary>
            Powerlaw fit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.SimpleAverage">
            <summary>
            Simple moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.ExponentialAverage">
            <summary>
            Exponential moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.ModifiedAverage">
            <summary>
            Modified moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.CumulativeAverage">
            <summary>
            Cumulative moving average.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.TrendLineType.WeightedAverage">
            <summary>
            Weighted moving average.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Implementation.UnknownValuePlotting">
            <summary>
            Describes available methods of plotting data with unknown values in a series.  
            <para>Double.NaN and null are examples of unknown values.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.UnknownValuePlotting.LinearInterpolate">
            <summary>
            Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Implementation.UnknownValuePlotting.DontPlot">
            <summary>
            Do not plot the unknown value on the chart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Implementation.PropertyUpdatedEventHandler">
            <summary>
            EventHandler delegate for property updated events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The PropertyUpdatedEventArgs in context.</param>
        </member>
        <member name="T:Infragistics.Controls.PointCollectionUtil">
            <summary>
            General purpose utility methods for collections of points.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.FlattenTo(System.Collections.Generic.IList{Infragistics.Portable.Point},System.Collections.Generic.IList{Infragistics.Portable.Point},System.Double)">
            <summary>
            Creates a simplified version of the the open simplex or polyline formed by the current points
            by removing internal points with the specified error tolerance.
            </summary>
            <param name="points">Polygon or polyline to flatten.</param>
            <param name="list">Destination to which the flattened polygon or polyline will be written (if null, a new one will be created)</param>
            <param name="E">Maximum flattenning error.</param>
            <returns>Point collection containing the flattened polygon or polyline.</returns>
            <remarks>
            The first and last point of the currents are always part of the returned points
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Gets the axis-aligned bounding box for the cloud of points.
            </summary>
            <param name="points"></param>
            <returns>axis-aligned bounding rectangle or Rect.Empty</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Infragistics.Portable.Point}})">
            <summary>
            Returns a Rect representing the bounds of all the points in the given list.
            </summary>
            <param name="points">A list of list of points.</param>
            <returns>A Rect representing the bounds of all given points.</returns>
            <remarks>The nested lists of points data structure corresponds to that which is used in the Shapefile format and other geospatial data sources.</remarks>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.IList{Infragistics.Portable.Point})">
            <summary>
            Gets the bounding rectangle containing all of the given Points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given Points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.Point}})">
            <summary>
            Gets the bounding rectangle containing all of the given points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetBounds(System.Collections.Generic.List{Infragistics.Portable.PointCollection})">
            <summary>
            Gets the bounding rectangle containing all of the given points.
            </summary>
            <param name="points">The Points to find a bounding rectangle for.</param>
            <returns>The bounding rectangle containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ClipTo(System.Collections.Generic.IList{Infragistics.Portable.Point},System.Collections.Generic.IList{Infragistics.Portable.Point},Infragistics.Portable.Clipper)">
            <summary>
            Clips the given points using the given Clipper.
            </summary>
            <param name="points">The points to clip using the given Clipper.</param>
            <param name="list">Not used.</param>
            <param name="clipper">The Clipper to use when clipping the given points to the target bounds.</param>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.GetCentroid(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Gets the centroid of the current cloud of points
            </summary>
            <param name="points">Cloud of points for which to calculate the centroid.</param>
            <returns>Centroid of the specified cloud of points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointCollection(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Converts the given list of points to a PointCollection object.
            </summary>
            <param name="points">The points to copy to the resulting PointCollection.</param>
            <returns>A PointCollection containing all of the given points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointList(System.Collections.Generic.IEnumerable{Infragistics.Portable.Point})">
            <summary>
            Converts an IEnumerable of Points to a List of Points.
            </summary>
            <param name="points">The IEnumerable of Points to convert.</param>
            <returns>A List of Points constructed from the given IEnumerable of Points.</returns>
        </member>
        <member name="M:Infragistics.Controls.PointCollectionUtil.ToPointCollections(System.Collections.Generic.List{System.Collections.Generic.List{Infragistics.Portable.Point}})">
            <summary>
            Converts a List of Lists of Points to a List of PointCollections.
            </summary>
            <param name="points">The List of Lists of Points to convert.</param>
            <returns>A List of PointCollections constructed from the given List of List of Points.</returns>
        </member>
        <member name="T:Infragistics.Controls.Implementation.InteractionState">
            <summary>
            Describes available interaction states of the chart or geographic map control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Implementation.InteractionState.None">
            <summary>
            User gesture will not change the state of the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Implementation.InteractionState.DragZoom">
            <summary>
            User gesture will start a drag rectangle to zoom the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Implementation.InteractionState.DragPan">
            <summary>
            User gesture will start a pan action to move the chart's window.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Implementation.InteractionState.Auto">
            <summary>
            User gesture will start a pan action in a touch environment and a drag rectangle in a mouse environment.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.DataSource.Implementation.BaseDataSource">
            <summary>
            Provides a base implementation of IDataSource that data source implementations can further extend.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.#ctor">
            <summary>
            Constructs a BaseDataSource
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IsPlaceholderItem(System.Int32)">
            <summary>
            Returns true if the item at the requested index is a placeholder item and has not been actualized.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.ActualSchema">
            <summary>
            Gets the resolved schema for the data source. Represents which properties are available for the items. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.ActualCount">
            <summary>
            Gets the current actual full count of the items in the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.FirstVisibleIndexRequested">
            <summary>
            Gets or sets which index consumers of the data source desire to be the current first visible index. A grid, for example, would indicate the current visible top row, and update this as that changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.LastVisibleIndexRequested">
            <summary>
            Gets or sets which index consumers of the data source desire to be the current last visible index. A grid, for example, would indicate the current visible top row, and update this as that changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.UpdateNotifier">
            <summary>
            Gets or sets an IDataSourceUpdateNotifier that the data source should invoke methods on to indicate various changes have occurred.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.GetItemAtIndex(System.Int32)">
            <summary>
            Returns the item at the specific index in the data source. This index is based on the data source's current view of the data, not the actual underlying indexes of the original source.
            </summary>
            <param name="index">The index of the requested item.</param>
            <returns>The item at the requested index.</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.GetItemProperty(System.Object,System.String)">
            <summary>
            Extracts the value of a named property for an item contained in the data source.
            </summary>
            <param name="item">The item from which to extract a property value.</param>
            <param name="propertyName">The name of the property to extract a value from.</param>
            <returns>The value of the specified property.</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.GetItemPropertyAtIndex(System.Int32,System.String)">
            <summary>
            Extracts a named property value from the item at a specified index.
            </summary>
            <param name="index">The index of the item from which to extract a property value.</param>
            <param name="valueName">The property value from which to extract a value.</param>
            <returns>The value of the specified property</returns>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IsVirtual">
            <summary>
            Gets if the current data source is a virtual data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.ExecutionContext">
            <summary>
            Gets or sets the execution context that the data source should synchronize asynchronous actions with, or use to defer delayed actions.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IsSortingSupported">
            <summary>
            Gets if sorting is supported on the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IsFilteringSupported">
            <summary>
            Gets if filtering is supported on the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.SortDescriptions">
            <summary>
            Gets a collection to add sort descriptions to. Changing the sort descriptions in this collection will adjust the sort applied to the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.FilterExpressions">
            <summary>
            Gets a collection to add filter expressions to. Changing the filter expressions in this collection will adjust the filter applied to the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.DeferAutoRefresh">
            <summary>
            Gets or sets whether the auto refresh mechanism of the data source is currently defered. The data source will not react to most setting changes while this is set to true an will instead defer processing.
            Setting this value to false will queue a new refresh.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.PrimaryKey">
            <summary>
            Gets or sets a list of property references that indicate the user provided primary key of the items in the data source. Consumers of the data source will often need to uniquely identify items in the data source. For this purpose a primary key should be specified.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.ActualPrimaryKey">
            <summary>
            Gets the current actual primary key of the data source. This may have been auto detected, if possible, or provided or overriden by the user.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.PropertiesRequested">
            <summary>
            Gets or sets a list of property references for the properties desired by the consumer of the data source. If known, 
            the data source may take steps to request only those properties, or to ensure that those properties are included, rather than the default behavior for
            this type of data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.NotifyUsingSourceIndexes">
            <summary>
            Gets whether, when manually notifying the data source of changes, one should use indexes relative to the actual source data, or relative to the view the data source is maintaining into the data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IsItemIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided item is supported.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IsKeyIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided primary key value is supported.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.NotifySetItem(System.Int32,System.Object,System.Object)">
            <summary>
            Manually notifies the data source that an item has been changed in the data it is bound to.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
            <param name="index">The index of the changed item.</param>
            <param name="oldItem">The old item at the desginated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
            <param name="newItem">The new item at the designated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.NotifyClearItems">
            <summary>
            Manually notifies the data source that the data it has bound to has been cleared and needs to be re-examined.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.NotifyInsertItem(System.Int32,System.Object)">
            <summary>
            Manually notifies the data source that an item has been inserted in the data it is bound to.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
            <param name="index">The index of the inserted item.</param>
            <param name="newItem">The new item at the designated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.NotifyRemoveItem(System.Int32,System.Object)">
            <summary>
            Manually notifies the data source that an item has been removed in the data it is bound to.
            This should not be necessary to call if the data that the data source is bound to is already observable.
            </summary>
            <param name="index">The index of the removed item.</param>
            <param name="oldItem">The old item at the designated index. You can optionally omit this value only if IsVirtual == true for this data source.</param>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.QueueAutoRefresh">
            <summary>
            Called to manually queue a refresh of the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.FlushAutoRefresh">
            <summary>
            Called to make sure a queued refresh of the data source has been applied before continuing. Should only be needed if you are trying to synchronously examine the results of changing settings on the data source.
            Note, for a virtual data source, the data source itself may be waiting for other synchronous requests to actualize data. This call will not wait for those, but will only make sure the appropriate requests are in flight from the settings changes
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.Refresh">
            <summary>
            Called to synchronously refresh the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IndexOfItem(System.Object)">
            <summary>
            Called to return the index for an item contained in the data source, or -1, if the item can't be found, or this action isn't currently supported.
            </summary>
            <param name="item">The item for which to find the index.</param>
            <returns>The index if possible, or -1</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.BaseDataSource.IndexOfKey(System.Object[])">
            <summary>
            Called to return the index for an primary key value contained in the data source, or -1, if the key can't be found, or this action isn't currently supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.DataSource.Implementation.LocalDataSource">
            <summary>
            A local data source which has synchronous access to its data items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.LocalDataSource.DataProvider">
            <summary>
            Gets or sets the data provider to use for this data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.LocalDataSource.ActualDataProvider">
            <summary>
            Gets the resolved data provider which this data source is actually using.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.LocalDataSource.ItemsSource">
            <summary>
            Gets or sets the backing data for the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.LocalDataSource.GetItemAtIndex(System.Int32)">
            <summary>
            Returns the item at the specific index in the data source. This index is based on the data source's current view of the data, not the actual underlying indexes of the original source.
            </summary>
            <param name="index">The index of the requested item.</param>
            <returns>The item at the requested index.</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.LocalDataSource.GetItemPropertyAtIndex(System.Int32,System.String)">
            <summary>
            Extracts a named property value from the item at a specified index.
            </summary>
            <param name="index">The index of the item from which to extract a property value.</param>
            <param name="valueName">The property value from which to extract a value.</param>
            <returns>The value of the specified property</returns>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.LocalDataSource.IsItemIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided item is supported.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.LocalDataSource.IsKeyIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided primary key value is supported.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.LocalDataSource.IndexOfItem(System.Object)">
            <summary>
            Called to return the index for an item contained in the data source, or -1, if the item can't be found, or this action isn't currently supported.
            </summary>
            <param name="item">The item for which to find the index.</param>
            <returns>The index if possible, or -1</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.LocalDataSource.IndexOfKey(System.Object[])">
            <summary>
            Called to return the index for an primary key value contained in the data source, or -1, if the key can't be found, or this action isn't currently supported.
            </summary>
            <param name="key">The primary key value to search for.</param>
            <returns>The index at which the primary key value occurs or -1 if not found or unavailable.</returns>
        </member>
        <member name="T:Infragistics.Controls.DataSource.Implementation.VirtualDataSource">
            <summary>
            A virtual data source which may not have synchronous access to all its data items, and resulting may synchronously return placeholders for items that have yet to be actualized.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.DataProvider">
            <summary>
            Gets or sets the virtual data provider to use with this data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.ActualDataProvider">
            <summary>
            Gets the actual data provider being used with this data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.PageSizeRequested">
            <summary>
            Gets or sets the desired page size. This may or may not be respected by the underlying provider, or its connected services.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.MaxCachedPages">
            <summary>
            Gets or sets the maximum number of data pages to cache in the data source before the oldest pages will start being evicted.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.ActualPageSize">
            <summary>
            Gets the actual resolved page size that will be used.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.IsVirtual">
            <summary>
            Gets whether the data source is virtual.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.IsPlaceholderItem(System.Int32)">
            <summary>
            Returns whether the item at the requested index is a placeholder for a virtual item which has yet to be loaded.
            </summary>
            <param name="index">The index of the item to check.</param>
            <returns>True if the item is a placeholder.</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.GetItemAtIndex(System.Int32)">
            <summary>
            Gets the item at the requested index. May return null, in which case you may want to check if that null represents a placeholder for a virtual item.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>The item at the requested index, with a null value potentially representing a placeholder.</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.GetItemPropertyAtIndex(System.Int32,System.String)">
            <summary>
            Gets a property from an item at a requested index.
            </summary>
            <param name="index">The index of the item to retrieve a property value from.</param>
            <param name="valueName">The name of the property from which to retrieve an item.</param>
            <returns>The value of the property on the item.</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.AddCandidate(System.Int32,Infragistics.Core.Controls.DataSource.DataSourcePageRequestPriority)">
            <summary>
            Adds a page candidate to the current page candidates.
            </summary>
            <param name="pageIndex">The index of the page candidate to add.</param>
            <param name="priority">The priority for the page candidate to add.</param>
            <returns>true if the page candidate was added.</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.RemoveCandidate(System.Int32)">
            <summary>
            Removes a page candidate from the current page candidates.
            </summary>
            <param name="pageIndex">The page index for the candidate to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.GetUnrealizedCount">
            <summary>
            Gets the number of unrealized or virtual items.
            </summary>
            <returns>The number of unrealized items.</returns>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.IsItemIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided item is supported.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.IsKeyIndexLookupSupported">
            <summary>
            Gets whether lookup of an index for a provided primary key value is supported.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.IndexOfItem(System.Object)">
            <summary>
            Called to return the index for an item contained in the data source, or -1, if the item can't be found, or this action isn't currently supported.
            </summary>
            <param name="item">The item for which to find the index.</param>
            <returns>The index if possible, or -1</returns>
        </member>
        <member name="M:Infragistics.Controls.DataSource.Implementation.VirtualDataSource.IndexOfKey(System.Object[])">
            <summary>
            Called to return the index for an primary key value contained in the data source, or -1, if the key can't be found, or this action isn't currently supported.
            </summary>
            <param name="key">The primary key value to search for.</param>
            <returns>The index at which the primary key value occurs or -1 if not found or unavailable.</returns>
        </member>
    </members>
</doc>
